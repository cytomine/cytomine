openapi: 3.1.0
info:
  title: Cytomine Core API
  version: 0.1.0
  description: core API provides requests for core features of Cytomine.

servers:
  - url: http://localhost:8080/api/

tags:
  - name: Activity | Image consultation
    description: Manage consultation records on images
  - name: Activity | Project connection
    description: Manage connection records on projects
  - name: Activity | user position
    description: Manage user position records on images
  - name: Annotation
    description: Manage all annotations type
  - name: Annotation | Reviewed annotation
    description: Manage reviewed annotations validated by human users
  - name: Annotation | User annotation
    description: Manage annotations created by human users
  - name: Annotation | Annotation index
    description: Manage annotation indexes
  - name: Annotation | Associated term
    description: Manage terms associated to annotations
  - name: Annotation | Associated track
    description: Manage tracks associated to annotations
  - name: Annotation | Comment
    description: Manage annotation comments
  - name: Health Check
    description: Health and status server checks
  - name: Image | Abstract image
    description: Manage images in a storage
  - name: Image | Abstract slice
    description: Manage slices of an image in a storage
  - name: Image | Companion file
    description: Manage companion files of an image in a storage
  - name: Image | Image instance
    description: Manage images in a project
  - name: Image | Slice instance
    description: Manage slices of an image in a project
  - name: Image | Image server
    description: Manage image servers (IMS)
  - name: Legacy user keys
    description: Legacy user keys management
  - name: Metadata | Property
    description: Manage properties (key-pair value) metadata
  - name: Metadata | Attached file
    description: Manage attached files metadata
  - name: Metadata | Rich-text description
    description: Manage rich-text description metadata
  - name: Metadata | Tag
    description: Manage tags metadata
  - name: Metadata | Tag association
    description: Manage associations between a tag and a domain
  - name: Ontology
    description: Manage ontologies
  - name: Ontology | Term
    description: Manage terms in an ontology
  - name: Ontology | Relation
    description: Manage relations
  - name: Ontology | Relation term
    description: Manage relation between terms in ontology
  - name: Project
    description: Manage projects
  - name: Project | Command
    description: Manage command history on a project
  - name: Project | Member
    description: Manage project members
  - name: Project | Default layer
    description: Manage project default layers
  - name: Project | Representative user
    description: Manage project representative users
  - name: Storage
    description: Manage storages (virtual disk space)
  - name: Storage | Member
    description: Manage storage members
  - name: Storage | Uploaded file
    description: Manage uploaded files in a storage
  - name: Track
    description: Manage tracks in an image
  - name: user
    description: Manage users
  - name: User | Associated Role
    description: Manage app-roles associated to users
  - name: User | Role
    description: Manage app-roles

paths:
  /api/abstractimage.json:
    post:
      tags:
        - Image | Abstract image
      summary: Add a new abstract image
      description: Add a new abstract image in the storage. See IMS to upload an image.
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AbstractImage"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AbstractImage"
    get:
      tags:
        - Image | Abstract image
      summary: List abstract images
      description: List abstract images in the storages the current user has access to
      parameters:
        - name: project
          in: query
          description: If set, check if image is in project or not
          required: false
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractImageCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/abstractimage/unused.json:
    get:
      tags:
        - Image | Abstract image
      summary: List unused abstract images
      description: List unused abstract images in the storages available for the current user
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractImageCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/abstractimage/{id}.json:
    get:
      tags:
        - Image | Abstract image
      summary: Get an abstract image
      description: Get an abstract image from the storage
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AbstractImage"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Image | Abstract image
      summary: Update abstract image
      description: Update abstract image metadata in the storage
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AbstractImage"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AbstractImage"
    delete:
      tags:
        - Image | Abstract image
      summary: Delete an abstract image
      description: Delete an abstract image from the storage
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AbstractImage"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/abstractimage/{id}/abstractslice.json:
    get:
      tags:
        - Image | Abstract slice
      description: Get all abstract slices for the given abstract image
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractSliceCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/abstractimage/{id}/associated.json:
    get:
      tags:
        - Image | Abstract image
      description: Get available associated images
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          description: associated image labels
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/abstractimage/{id}/associated/{label}.{format}:
    post:
      tags:
        - Image | Abstract image
      summary: Get an associated image
      description: Get an associated image of an abstract image (e.g. label, macro, thumbnail)
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
        - $ref: "#/components/parameters/path-image-response-format"
        - $ref: "#/components/parameters/path-associated-label"
        - $ref: "#/components/parameters/query-max-size"
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"

  /api/abstractimage/{id}/companionfile.json:
    get:
      tags:
        - Image | Companion file
      description: Get all companion files for the given abstract image
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanionFileCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/abstractimage/{id}/properties/extract.json:
    post:
      tags:
        - Image | Abstract image
      summary: Fill abstract image metadata
      description: Fill abstract image metadata from image properties
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
        - name: deep
          in: path
          description: True to fill property slice fields
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: empty
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"

  /api/abstractimage/{id}/properties/regenerate.json:
    post:
      tags:
        - Image | Abstract image
      summary: Regenerate abstract image metadata
      description: Regenerate abstract image metadata from image properties
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
        - name: deep
          in: path
          description: True to fill property slice fields
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: empty
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"

  /api/abstractimage/{id}/preview.{format}:
    post:
      tags:
        - Image | Abstract image
      description: Get an abstract image preview
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
        - $ref: "#/components/parameters/path-image-response-format"
        - $ref: "#/components/parameters/query-max-size"
        - name: colormap
          in: query
          description: The absolute path of a colormap file
          required: false
          schema:
            type: string
        - name: inverse
          in: query
          description: True if colors have to be inversed
          required: false
          schema:
            type: integer
            format: int32
        - name: contrast
          in: query
          description: Multiply pixels by contrast
          required: false
          schema:
            type: number
        - name: gamma
          in: query
          description: Apply gamma correction
          required: false
          schema:
            type: number
        - name: bits
          in: query
          description: Output bit depth per channel
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"

  /api/abstractimage/{id}/thumb.{format}:
    post:
      tags:
        - Image | Abstract image
      description: Get an abstract image thumbnail
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
        - $ref: "#/components/parameters/path-image-response-format"
        - name: refresh
          in: query
          description: If true, don't take it from cache and regenerate it
          required: false
          schema:
            type: boolean
        - $ref: "#/components/parameters/query-max-size"
        - name: colormap
          in: query
          description: The absolute path of a colormap file
          required: false
          schema:
            type: string
        - name: inverse
          in: query
          description: True if colors have to be inversed
          required: false
          schema:
            type: integer
            format: int32
        - name: contrast
          in: query
          description: Multiply pixels by contrast
          required: false
          schema:
            type: number
        - name: gamma
          in: query
          description: Apply gamma correction
          required: false
          schema:
            type: number
        - name: bits
          in: query
          description: Output bit depth per channel
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"

  /api/abstractimage/{id}/user.json:
    get:
      tags:
        - Image | Abstract image
      description: Get image uploader
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SecUser"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/abstractslice.json:
    post:
      tags:
        - Image | Abstract slice
      description:
        Add a new abstract slice. See 'upload file service' to upload a
        slice.
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AbstractSlice"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AbstractSlice"

  /api/abstractslice/{id}.json:
    get:
      tags:
        - Image | Abstract slice
      description: Get an abstract slice
      parameters:
        - name: id
          in: path
          description: The abstract slice id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AbstractSlice"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Image | Abstract slice
      description: Update an abstract slice
      parameters:
        - name: id
          in: path
          description: The abstract slice id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AbstractSlice"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AbstractSlice"
    delete:
      tags:
        - Image | Abstract slice
      description: Delete an abstract slice)
      parameters:
        - name: id
          in: path
          description: The abstract slice id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AbstractSlice"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/abstractslice/{id}/thumb.{format}:
    post:
      tags:
        - Image | Abstract slice
      description: Get a small image (thumb) for a specific slice
      parameters:
        - name: id
          in: path
          description: The image id
          required: true
          schema:
            type: integer
            format: int64
        - name: refresh
          in: query
          description: If true, don't take it from cache and regenerate it
          required: false
          schema:
            type: boolean
        - $ref: "#/components/parameters/query-max-size"
        - name: colormap
          in: query
          description: The absolute path of a colormap file
          required: false
          schema:
            type: string
        - name: inverse
          in: query
          description: True if colors have to be inversed
          required: false
          schema:
            type: integer
            format: int32
        - name: contrast
          in: query
          description: Multiply pixels by contrast
          required: false
          schema:
            type: number
        - name: gamma
          in: query
          description: Apply gamma correction
          required: false
          schema:
            type: number
        - name: bits
          in: query
          description: Output bit depth per channel
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"

  /api/abstractslice/{id}/user.json:
    get:
      tags:
        - Image | Abstract slice
      description: Show user who uploaded the slice
      parameters:
        - name: id
          in: path
          description: The abstract slice id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AbstractSlice"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/abstractimage/{id}/{channel}/{zStack}/{time}/abstractslice.json:
    get:
      tags:
        - Image | Abstract slice
      description: Get the abstract slice for the given coordinates and abstract image
      parameters:
        - $ref: "#/components/parameters/path-abstract-image-id"
        - name: zStack
          in: path
          description: The zStack coordinate
          required: true
          schema:
            type: number
        - name: time
          in: path
          description: The time coordinate
          required: true
          schema:
            type: number
        - name: channel
          in: path
          description: The channel coordinate
          required: true
          schema:
            type: number
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AbstractSlice"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/annotation.json:
    post:
      tags:
        - Annotation
      summary: Add an annotation
      description: Create a user annotation
      parameters: []
      responses:
        "200":
          description: annotation domain
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"

  /api/annotation/{id}.json:
    get:
      tags:
        - Annotation
      description: Get an annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
      responses:
        "200":
          description: annotation domain
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Annotation
      description: Update an annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
      responses:
        "200":
          description: annotation domain
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
    delete:
      tags:
        - Annotation
      description: Delete an annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
      responses:
        "200":
          description: annotation domain
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/annotation/{id}/annotationtrack.json:
    get:
      tags:
        - Annotation | Associated track
      description: List associations between an annotation and a track for an annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationTrackCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/annotation/{id}/crop.{format}:
    get:
      tags:
        - Annotation
      summary: Get an annotation crop
      description:
        Get a crop of an annotation (image area framing annotation). It
        works for all kinds of annotation but slower than a direct call to a specific
        kind of annotation.
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
        - $ref: "#/components/parameters/path-image-response-format"
        - name: type
          in: query
          description:
            Type of crop. Allowed values are 'crop' (default behavior if
            not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary
            mask), 'alphaMask (part of crop outside annotation is transparent, requires
            png format)
          required: false
          schema:
            type: string
        - name: draw
          in: query
          description: Equivalent to set type='draw'
          required: false
          schema:
            type: boolean
        - name: mask
          in: query
          description: Equivalent to set type='mask'
          required: false
          schema:
            type: boolean
        - name: alphaMask
          in: query
          description: Equivalent to set type='alphaMask'
          required: false
          schema:
            type: boolean
        - name: maxSize
          in: query
          description: Maximum crop size in width and height
          required: false
          schema:
            type: integer
            format: int32
        - name: zoom
          in: query
          description:
            Zoom level in which crop is extracted. Ignored if maxSize is
            set.
          required: false
          schema:
            type: integer
            format: int32
        - name: increaseArea
          in: query
          description:
            Increase crop area by multiplying original crop size by this
            factor.
          required: false
          schema:
            type: number
        - name: complete
          in: query
          description: Do not simplify the annotation shape.
          required: false
          schema:
            type: boolean
        - name: colormap
          in: query
          description: The absolute path of a colormap file
          required: false
          schema:
            type: string
        - name: inverse
          in: query
          description: True if colors have to be inversed
          required: false
          schema:
            type: integer
            format: int32
        - name: contrast
          in: query
          description: Multiply pixels by contrast
          required: false
          schema:
            type: number
        - name: gamma
          in: query
          description: Apply gamma correction
          required: false
          schema:
            type: number
        - name: bits
          in: query
          description: Output bit depth per channel
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/annotation/{id}/fill.json:
    post:
      tags:
        - Annotation
      description: Fill an annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
      responses:
        "200":
          description: annotation domain
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"

  /api/annotation/{id}/simplify.json:
    put:
      tags:
        - Annotation
      summary: Simplify an annotation shape
      description:
        Simplify an existing annotation form (reducing the number of point).
        The number of points of the resulting form is not garantee to be between minPoint
        and maxPoint (best effort)
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
        - name: minPoint
          in: query
          description: Minimum number of point
          required: true
          schema:
            type: integer
            format: int32
        - name: maxPoint
          in: query
          description: Maximum number of point
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: annotation domain
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/annotation/{idannotation}/notuser/{idNotuser}/term.json:
    get:
      tags:
        - Annotation | Associated term
      description: List associated terms to an annotation, except those done by a user
      parameters:
        - name: idannotation
          in: path
          description: The annotation id
          required: true
          schema:
            type: integer
            format: int64
        - name: idNotuser
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationTermCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/annotation/{id}/review.json:
    delete:
      tags:
        - Annotation | Reviewed annotation
      description: Cancel the review of an annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewedAnnotation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Annotation | Reviewed annotation
      description: Review an annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
        - name: POST JSON (terms)
          in: query
          description:
            List of annotation terms (if null, keep term already map with
            this annotation by the annotation creator)
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewedAnnotation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ReviewedAnnotation"

  /api/annotation/{idannotation}/term/{idterm}.json:
    post:
      tags:
        - Annotation | Associated term
      description: Associate a term to an annotation
      parameters:
        - name: idannotation
          in: path
          description: The annotation id
          required: true
          schema:
            type: integer
            format: int64
        - name: idterm
          in: path
          description: The term id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AnnotationTerm"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AnnotationTerm"

  /api/annotation/{idannotation}/term/{idterm}/clearBefore.json:
    post:
      tags:
        - Annotation | Associated term
      description: Associate a term to an annotation and remove previous existing associations
      parameters:
        - name: idannotation
          in: path
          description: The annotation id
          required: true
          schema:
            type: integer
            format: int64
        - name: idterm
          in: path
          description: The term id
          required: true
          schema:
            type: integer
            format: int64
        - name: clearForAll
          in: query
          description: Delete term for all users
          required: true
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AnnotationTerm"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AnnotationTerm"

  /api/annotation/{idannotation}/term/{idterm}/user/{iduser}.json:
    get:
      tags:
        - Annotation | Associated term
      description: Get an association between annotation and term
      parameters:
        - name: idannotation
          in: path
          description: The annotation id
          required: true
          schema:
            type: integer
            format: int64
        - name: idterm
          in: path
          description: The term id
          required: true
          schema:
            type: integer
            format: int64
        - name: iduser
          in: path
          description: "(Optional) The user id. If null, it will consider the annotation-term of all users"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AnnotationTerm"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    delete:
      tags:
        - Annotation | Associated term
      description: Delete an association between an annotation and a term
      parameters:
        - name: idannotation
          in: path
          description: The annotation id
          required: true
          schema:
            type: integer
            format: int64
        - name: idterm
          in: path
          description: The term id
          required: true
          schema:
            type: integer
            format: int64
        - name: iduser
          in: path
          description: "(Optional) The user id. If null, it will consider the current user"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AnnotationTerm"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/annotation/method/download:
    get:
      tags:
        - Annotation
      description: Download an annotation search report
      parameters:
        - name: format
          in: query
          description: "(Optional) Output file format (pdf, xls,...)"
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          description: file
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/annotation/search.json:
    post:
      tags:
        - Annotation
      description: Search annotations
      parameters:
        - name: showDefault
          in: query
          description: |
            "(Optional) If true, show 'basic', 'meta', and 'term' properties
            group. See showBasic/Meta/... for more information (default: true ONLY IF
            NO OTHER show/hideXXX are set)"
          required: true
          schema:
            type: boolean
        - name: showBasic
          in: query
          description: "(Optional) If true, show basic properties group (id, class...)"
          required: true
          schema:
            type: boolean
        - name: hideBasic
          in: query
          description: "(Optional) If true, hide basic properties group (id, class...)"
          required: true
          schema:
            type: boolean
        - name: showMeta
          in: query
          description: "(Optional) If true, show meta properties group (urls, image id, project id,...)"
          required: true
          schema:
            type: boolean
        - name: hideMeta
          in: query
          description: "(Optional) If true, hide meta properties group (urls, image id, project id,...)"
          required: true
          schema:
            type: boolean
        - name: showWKT
          in: query
          description: "(Optional) If true, show the location WKT properties."
          required: true
          schema:
            type: boolean
        - name: hideWKT
          in: query
          description: "(Optional) If true, hide the location WKT properties."
          required: true
          schema:
            type: boolean
        - name: showGIS
          in: query
          description: "(Optional) If true, show the form GIS field (area, centroid,...). This may slow down the request!."
          required: true
          schema:
            type: boolean
        - name: hideGIS
          in: query
          description: "(Optional) If true, hide the form GIS field (area, centroid,...). This may slow down the request!."
          required: true
          schema:
            type: boolean
        - name: showTerm
          in: query
          description: "(Optional) If true, show the term properties (id, user who add the term,...). This may slow down the request."
          required: true
          schema:
            type: boolean
        - name: hideTerm
          in: query
          description: "(Optional) If true, hide the term properties (id, user who add the term,...). This may slow down the request."
          required: true
          schema:
            type: boolean
        - name: showuser
          in: query
          description: "(Optional) If true, show the annotation user details (username,...). This may slow down the request."
          required: true
          schema:
            type: boolean
        - name: hideuser
          in: query
          description: "(Optional) If true, hide the annotation user details (username,...). This may slow down the request."
          required: true
          schema:
            type: boolean
        - name: showImage
          in: query
          description: "(Optional) If true, show the annotation image details (filename,...). This may slow down the request."
          required: true
          schema:
            type: boolean
        - name: hideImage
          in: query
          description: "(Optional) If true, hide the annotation image details (filename,...). This may slow down the request."
          required: true
          schema:
            type: boolean
        - name: showSlice
          in: query
          description: "(Optional) If true, show the annotation slice details (c,z,t,...). This may slow down the request."
          required: true
          schema:
            type: boolean
        - name: hideSlice
          in: query
          description: "(Optional) If true, hide the annotation slice details (c,z,t,...). This may slow down the request."
          required: true
          schema:
            type: boolean
        - name: showTrack
          in: query
          description: "(Optional) If true, show the annotation track details. This may slow down the request."
          required: true
          schema:
            type: boolean
        - name: hideTrack
          in: query
          description: "(Optional) If true, hide the annotation track details. This may slow down the request."
          required: true
          schema:
            type: boolean
        - name: project
          in: query
          description: "(Optional) Get only annotation for this project id"
          required: true
          schema:
            type: integer
            format: int64
        - name: job
          in: query
          description: "(Optional) Get only annotation for this job id"
          required: true
          schema:
            type: integer
            format: int64
        - name: user
          in: query
          description: "(Optional) Get only annotation for this user id"
          required: true
          schema:
            type: integer
            format: int64
        - name: users
          in: query
          description: "(Optional) Get only annotation for these users id"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: term
          in: query
          description: "(Optional) Get only annotation link with this term id"
          required: true
          schema:
            type: integer
            format: int64
        - name: terms
          in: query
          description: "(Optional) Get only annotation for these terms id"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: noTerm
          in: query
          description: "(Optional) Also get annotation with no term"
          required: true
          schema:
            type: boolean
        - name: multipleTerm
          in: query
          description: "(Optional) Only get annotation with multiple terms"
          required: true
          schema:
            type: integer
            format: int64
        - name: image
          in: query
          description: "(Optional) Get only annotation for this image id"
          required: true
          schema:
            type: integer
            format: int64
        - name: images
          in: query
          description: "(Optional) Get only annotation for these images id"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: slice
          in: query
          description: "(Optional) Get only annotation for this slice id"
          required: true
          schema:
            type: integer
            format: int64
        - name: slices
          in: query
          description: "(Optional) Get only annotation for these slices id"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: track
          in: query
          description: "(Optional) Get only annotation for this track id"
          required: true
          schema:
            type: integer
            format: int64
        - name: tracks
          in: query
          description: "(Optional) Get only annotation for these tracks id"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: noTrack
          in: query
          description: "(Optional) Also get annotation with no track"
          required: true
          schema:
            type: boolean
        - name: multipleTrack
          in: query
          description: "(Optional) Only get annotation with multiple tracks"
          required: true
          schema:
            type: integer
            format: int64
        - name: afterSlice
          in: query
          description: "(Optional) Only to be used with track(s), return only annotation in the track(s) after the given slice"
          required: true
          schema:
            type: integer
            format: int64
        - name: beforeSlice
          in: query
          description: "(Optional) Only to be used with track(s), return only annotation in the track(s) before the given slice"
          required: true
          schema:
            type: integer
            format: int64
        - name: sliceDirection
          in: query
          description: |
            'Only to be used with beforeSlice, afterSlice or aroundSlide
            and mandatory in this case. Give the dimension to follow in the image. Accepted
          values: C,Z,T'
          required: true
          schema:
            type: integer
            format: int64
        - name: tags
          in: query
          description: "(Optional) Get only annotation associated with these tags"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: tag
          in: query
          description: "(Optional) Get only annotation associated with this tag"
          required: true
          schema:
            type: integer
            format: int64
        - name: noTag
          in: query
          description: "(Optional) Also get annotation with no tag"
          required: true
          schema:
            type: boolean
        - name: suggestedTerm
          in: query
          description: "(Optional) Get only annotation suggested by for this term by a job"
          required: true
          schema:
            type: integer
            format: int64
        - name: suggestedTerms
          in: query
          description: "(Optional) Get only annotation suggested by for these terms by a job"
          required: true
          schema:
            type: integer
            format: int64
        - name: userForTerm
          in: query
          description: "(Optional) Get only user annotation link with a term added by this user id"
          required: true
          schema:
            type: integer
            format: int64
        - name: reviewed
          in: query
          description: "(Optional) Get only reviewed annotations"
          required: true
          schema:
            type: boolean
        - name: reviewusers
          in: query
          description: "(Optional) Get only annotation reviewed by these users"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: notReviewedOnly
          in: query
          description: "(Optional) Only get annotation not reviewed"
          required: true
          schema:
            type: boolean
        - name: kmeans
          in: query
          description: "(Optional) Enable or not kmeans (only for GUI)"
          required: true
          schema:
            type: boolean
        - name: kmeansValue
          in: query
          description: "(Optional) Only used for GUI "
          required: true
          schema:
            type: integer
            format: int64
        - name: bbox
          in: query
          description: "(Optional) Get only annotations having intersection with the bbox (WKT)"
          required: true
          schema:
            type: string
        - name: bboxAnnotation
          in: query
          description: "(Optional) Get only annotations having intersection with this annotation"
          required: true
          schema:
            type: integer
            format: int64
        - name: baseAnnotation
          in: query
          description: "(Optional) The base annotation for spatial request (annotation id or wkt location)"
          required: true
          schema:
            type: integer
            format: int64
        - name: maxDistanceBaseAnnotation
          in: query
          description: "(Optional) Only get annotation inside the max distance"
          required: true
          schema:
            type: integer
            format: int64
        - name: afterThan
          in: query
          description: "(Optional) Annotations created before this date will not be returned"
          required: true
          schema:
            type: integer
            format: int64
        - name: beforeThan
          in: query
          description: "(Optional) Annotations created after this date will not be returned"
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          description: "[annotation listing]"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"

  /api/annotations/{id}:
    get:
      summary: Get an annotation
      description: |
        Retrieves the annotation with the specified ID from the new annotation service.
        Falls back to the legacy annotation retrieval method if not found.
      tags:
        - Annotation
      operationId: getById
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/annotation"
        "404":
          $ref: "#/components/responses/not-found"

  /api/annotationcorrection.json:
    post:
      tags:
        - Annotation
      description: Add or remove a polygon from an annotation
      parameters:
        - name: minPoint
          in: query
          description: Minimum number of point
          required: true
          schema:
            type: integer
            format: int32
        - name: maxPoint
          in: query
          description: Maximum number of point
          required: true
          schema:
            type: integer
            format: int32
        - name: "JSON POST DATA: location"
          in: query
          description: WKT form of Y
          required: true
          schema:
            type: string
        - name: "JSON POST DATA: review"
          in: query
          description: Only get reviewed annotation
          required: true
          schema:
            type: boolean
        - name: "JSON POST DATA: image"
          in: query
          description: The image id
          required: true
          schema:
            type: integer
            format: int64
        - name: "JSON POST DATA: remove"
          in: query
          description: Add or remove Y
          required: true
          schema:
            type: boolean
        - name: "JSON POST DATA: layers"
          in: query
          description: List of layers id
          required: true
          schema:
            type: array
            items:
              type: string
        - name: "JSON POST DATA: annotation"
          in: query
          description:
            The annotation to correct (if specified, only this annotation
            will be changed; image and layers parameters will be ignored)
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: annotation domain
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"

  /api/annotationtrack.json:
    post:
      tags:
        - Annotation | Associated track
      description: Associate a track to an annotation
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AnnotationTrack"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AnnotationTrack"

  /api/annotationtrack/{annotation}/{track}.json:
    get:
      tags:
        - Annotation | Associated track
      description: Get an association between an annotation and a track
      parameters:
        - name: annotation
          in: path
          description: The annotation id
          required: true
          schema:
            type: integer
            format: int64
        - name: track
          in: path
          description: The track id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AnnotationTrack"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    delete:
      tags:
        - Annotation | Associated track
      description: Remove an annotation from a track
      parameters:
        - name: annotation
          in: path
          description: The annotation id
          required: true
          schema:
            type: integer
            format: int64
        - name: track
          in: path
          description: The track id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AnnotationTrack"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/annotation-layers/{id}/annotations:
    get:
      summary: Get all annotations for an annotation layer
      tags:
        - Annotation
      operationId: getAnnotationsByLayer
      parameters:
        - $ref: "#/components/parameters/path-annotation-layer-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/annotation"

  /api/annotation-layers/{id}/task-run-layer:
    get:
      summary: Get a task run layer for an annotation layer
      tags:
        - Annotation
      operationId: findTaskRunLayer
      parameters:
        - $ref: "#/components/parameters/path-annotation-layer-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task-run-layer"

  /api/attachedfile.json:
    post:
      tags:
        - Metadata | Attached file
      description: Upload an attached file for a domain
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AttachedFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                "files[]":
                  type: string
                  format: binary
                domainClassName:
                  $ref: "#/components/schemas/DomainClassName"
                domainIdent:
                  $ref: "#/components/schemas/DomainIdent"
                filename:
                  type: string
                  description: "The filename to display"
              required:
                - "files[]"
                - domainClassName
                - domainIdent

  /api/attachedfile/{id}.json:
    get:
      tags:
        - Metadata | Attached file
      description: Get an attached file
      parameters:
        - $ref: "#/components/parameters/path-attached-file-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AttachedFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    delete:
      tags:
        - Metadata | Attached file
      description: Delete an attached file
      parameters:
        - $ref: "#/components/parameters/path-attached-file-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AttachedFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/attachedfile/{id}/download:
    get:
      tags:
        - Metadata | Attached file
      description: Download an attached file
      parameters:
        - $ref: "#/components/parameters/path-attached-file-id"
      responses:
        "200":
          description: file
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/averageConnections.json:
    get:
      tags:
        - Activity | Project connection
      description: Get the average project connections on Cytomine.
      parameters:
        - name: afterThan
          in: query
          description:
            Average on the project connection where created > the afterThan
            parameter. Optional, the beforeThan Date -1 year will be considered if none
            is given.
          required: true
          schema:
            type: integer
            format: int64
        - name: beforeThan
          in: query
          description:
            Average on the project connection where created < the beforeThan
            parameter. Optional, the current Date will be considered if none is given.
          required: true
          schema:
            type: integer
            format: int64
        - name: period
          in: query
          description: "The period of connections (hour : by hours, day : by days, week : by weeks) (Mandatory)"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: project connection
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/commandhistory.json:
    get:
      tags:
        - Project | Command
      description:
        Get the last action for a user in a project or in all projects
        available for the current user
      parameters:
        - name: id
          in: path
          description: "The project id (if null: all projects)"
          required: true
          schema:
            type: integer
            format: int64
        - name: user
          in: query
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
        - name: startDate
          in: query
          description: Will return actions created after this date. (Optional)
          required: true
          schema:
            type: integer
            format: int64
        - name: endDate
          in: query
          description: Will return actions created before this date. (Optional)
          required: true
          schema:
            type: integer
            format: int64
        - name: fullData
          in: query
          description:
            Flag to include the full JSON of the data field on each command
            history. Not recommended for long listing.
          required: true
          schema:
            type: boolean
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          description: commandHistory
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/companionfile.json:
    post:
      tags:
        - Image | Companion file
      description:
        Add a new companion file. See 'upload file service' to upload a
        slice.
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CompanionFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CompanionFile"

  /api/companionfile/{id}.json:
    get:
      tags:
        - Image | Companion file
      description: Get a companion file
      parameters:
        - name: id
          in: path
          description: The companion file id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CompanionFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Image | Companion file
      description: Update a companion file
      parameters:
        - name: id
          in: path
          description: The companion file id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CompanionFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CompanionFile"
    delete:
      tags:
        - Image | Companion file
      description: Delete a companion file
      parameters:
        - name: id
          in: path
          description: The companion file id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CompanionFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/companionfile/{id}/user.json:
    get:
      tags:
        - Image | Companion file
      description: Show user who uploaded the companion file
      parameters:
        - name: id
          in: path
          description: The companion file id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CompanionFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/connectionFrequency.json:
    get:
      tags:
        - Activity | Project connection
      description: Get the number of connections in the specified project
      parameters:
        - name: project
          in: path
          description: The identifier of the project
          required: true
          schema:
            type: integer
            format: int64
        - name: startDate
          in: query
          description: Only connections after this date will be counted (optional)
          required: true
          schema:
            type: integer
            format: int64
        - name: endDate
          in: query
          description: Only connections before this date will be counted (optional)
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: project connection
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/domain/{domainClassName}/{domainIdent}/attachedfile.json:
    get:
      tags:
        - Metadata | Attached file
      description: List attached files for a domain
      parameters:
        - $ref: "#/components/parameters/path-domain-class-name"
        - $ref: "#/components/parameters/path-domain-ident"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachedFileCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/domain/{domainClassName}/{domainIdent}/description.json:
    get:
      tags:
        - Metadata | Rich-text description
      description: Get description for a domain
      parameters:
        - $ref: "#/components/parameters/path-domain-class-name"
        - $ref: "#/components/parameters/path-domain-ident"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Description"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    post:
      tags:
        - Metadata | Rich-text description
      description: Add a description to a domain
      parameters:
        - $ref: "#/components/parameters/path-domain-class-name"
        - $ref: "#/components/parameters/path-domain-ident"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Description"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Description"
    put:
      tags:
        - Metadata | Rich-text description
      description: Update a description
      parameters:
        - $ref: "#/components/parameters/path-domain-class-name"
        - $ref: "#/components/parameters/path-domain-ident"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Description"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Description"
    delete:
      tags:
        - Metadata | Rich-text description
      description: Delete a description
      parameters:
        - $ref: "#/components/parameters/path-domain-class-name"
        - $ref: "#/components/parameters/path-domain-ident"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Description"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/domain/{domainClassName}/{domainIdent}/key/{key}/property.json:
    get:
      tags:
        - Metadata | Property
      description: Get a property for a domain, by key
      parameters:
        - $ref: "#/components/parameters/path-domain-class-name"
        - $ref: "#/components/parameters/path-domain-ident"
        - $ref: "#/components/parameters/path-property-key"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Property"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/domain/{domainClassName}/{domainIdent}/property.json:
    get:
      tags:
        - Metadata | Property
      description: List properties for a cytomine domain
      parameters:
        - $ref: "#/components/parameters/path-domain-class-name"
        - $ref: "#/components/parameters/path-domain-ident"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    post:
      tags:
        - Metadata | Property
      description: Add a property to a domain
      parameters:
        - $ref: "#/components/parameters/path-domain-class-name"
        - $ref: "#/components/parameters/path-domain-ident"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Property"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Property"

  /api/domain/{domainClassName}/{domainIdent}/property/{id}.json:
    get:
      tags:
        - Metadata | Property
      description: Get a property for a domain
      parameters:
        - $ref: "#/components/parameters/path-domain-class-name"
        - $ref: "#/components/parameters/path-domain-ident"
        - $ref: "#/components/parameters/path-property-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Property"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Metadata | Property
      description: Edit a property
      parameters:
        - $ref: "#/components/parameters/path-domain-class-name"
        - $ref: "#/components/parameters/path-domain-ident"
        - $ref: "#/components/parameters/path-property-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Property"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Property"
    delete:
      tags:
        - Metadata | Property
      description: Delete a property
      parameters:
        - $ref: "#/components/parameters/path-domain-class-name"
        - $ref: "#/components/parameters/path-domain-ident"
        - $ref: "#/components/parameters/path-property-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Property"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/domain/{domainClassName}/{domainIdent}/tag_domain_association.json:
    get:
      tags:
        - Metadata | Tag association
      description: List tag associations for a domain
      parameters:
        - $ref: "#/components/parameters/path-domain-class-name"
        - $ref: "#/components/parameters/path-domain-ident"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagDomainAssociationCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    post:
      tags:
        - Metadata | Tag association
      description: Associate a tag to a domain
      parameters:
        - $ref: "#/components/parameters/path-domain-class-name"
        - $ref: "#/components/parameters/path-domain-ident"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TagDomainAssociation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TagDomainAssociation"

  /api/image-instances/{id}/annotation-layers:
    get:
      summary: Get all annotation layers for an image instance
      tags:
        - Annotation
      operationId: getAnnotationLayersByImage
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/annotation-layer"

  /api/imageconsultation/resume.json:
    get:
      tags:
        - Activity | Image consultation
      description: Summarize the consulted images for a given user and a given project
      parameters:
        - name: user
          in: query
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
        - name: project
          in: query
          description: The project id
          required: true
          schema:
            type: integer
            format: int64
        - name: export
          in: query
          description: "The export format (supported: csv). Otherwise, return a json"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: image consultation
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance.json:
    post:
      tags:
        - Image | Image instance
      description: Add an image to a project
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ImageInstance"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ImageInstance"

  /api/imageinstance/{id}.json:
    get:
      tags:
        - Image | Image instance
      summary: Get an image in a project
      description: Get an image instance, that is an image in a project
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ImageInstance"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Image | Image instance
      description: Update an image in a project
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ImageInstance"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ImageInstance"
    delete:
      tags:
        - Image | Image instance
      summary: Remove an image from a project
      description: |
        Remove an image from a project. The image instance is deleted with all other resources referencing this
        resource. It includes notably all associated annotations and metadata.

        The underlying Abstract Image is not deleted: the image is thus not removed from the storage.
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ImageInstance"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{image}/annotation/review.json:
    put:
      tags:
        - Annotation | Reviewed annotation
      description: Review some annotations in an image
      parameters:
        - name: image
          in: path
          description: The image id
          required: true
          schema:
            type: integer
            format: int64
        - name: users
          in: path
          description: The list of users id
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewedAnnotation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ReviewedAnnotation"
    delete:
      tags:
        - Annotation | Reviewed annotation
      description: Cancel review for some annotations in an image
      parameters:
        - name: image
          in: path
          description: The image id
          required: true
          schema:
            type: integer
            format: int64
        - name: users
          in: path
          description: The list of users id
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewedAnnotation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{idImage}/annotation/included.json:
    get:
      tags:
        - Annotation
      description: Search annotations included in annotation
      parameters:
        - name: idImage
          in: path
          description: The image id
          required: true
          schema:
            type: integer
            format: int64
        - name: geometry
          in: query
          description: "(Optional) WKT form of the geometry (if not set, set annotation param)"
          required: true
          schema:
            type: string
        - name: annotation
          in: query
          description: "(Optional) The annotation id for the geometry (if not set, set geometry param)"
          required: true
          schema:
            type: integer
            format: int64
        - name: user
          in: query
          description: "The annotation user id"
          required: true
          schema:
            type: integer
            format: int64
        - name: terms
          in: query
          description: The annotation terms id
          required: true
          schema:
            type: array
            items:
              type: string
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          description: file
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{idImage}/annotation/included/download:
    get:
      tags:
        - Annotation
      description: Download an annotation search report for included annotations
      parameters:
        - name: idImage
          in: path
          description: The image id
          required: true
          schema:
            type: integer
            format: int64
        - name: geometry
          in: query
          description: "(Optional) WKT form of the geometry (if not set, set annotation param)"
          required: true
          schema:
            type: string
        - name: annotation
          in: query
          description: "(Optional) The annotation id for the geometry (if not set, set geometry param)"
          required: true
          schema:
            type: integer
            format: int64
        - name: user
          in: query
          description: "The annotation user id"
          required: true
          schema:
            type: integer
            format: int64
        - name: terms
          in: query
          description: The annotation terms id
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: file
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{id}/associated.json:
    get:
      tags:
        - Image | Image instance
      description: Get associated image labels
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      collection:
                        type: array
                        items:
                          type: string
                          enum:
                            - label
                            - macro
                            - thumb
                  - $ref: "#/components/schemas/collection"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{id}/associated/{label}.{format}:
    get:
      tags:
        - Image | Image instance
      description:
        Get an associated image of an image instance (e.g. label, macro,
        thumbnail)
      summary: Get an associated image
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
        - $ref: "#/components/parameters/path-associated-label"
        - $ref: "#/components/parameters/path-image-response-format"
        - $ref: "#/components/parameters/query-max-size"
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{id}/consultation.json:
    post:
      tags:
        - Activity | Image consultation
      description: Add a new image consultation record
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
      responses:
        "200":
          description: image consultation
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"

  /api/imageinstance/{id}/next.json:
    get:
      tags:
        - Image | Image instance
      description: Get next image in project
      summary: Get next image in project
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ImageInstance"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{id}/online.json:
    get:
      tags:
        - Activity | user position
      description: Get users that have opened an image recently.
      parameters:
        - name: id
          in: path
          description: The image id (Mandatory)
          required: true
          schema:
            type: integer
            format: int64
        - name: slice
          in: query
          description: The slice id
          required: false
          schema:
            type: integer
            format: int64
        - name: broadcast
          in: query
          description:
            If set to true, only users broadcasting their position will be
            returned
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: user position
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{image}/positions.json:
    get:
      tags:
        - Activity | user position
      description: Summarize the userPosition entries.
      parameters:
        - name: image
          in: path
          description: The image id
          required: true
          schema:
            type: integer
            format: int64
        - name: slice
          in: query
          description: The slice id
          required: false
          schema:
            type: integer
            format: int64
        - name: user
          in: query
          description: The user id
          required: false
          schema:
            type: integer
            format: int64
        - name: afterThan
          in: query
          description: A date. Will select all the entries created after this date.
          required: false
          schema:
            type: integer
            format: int64
        - name: beforeThan
          in: query
          description: A date. Will select all the entries created before this date.
          required: false
          schema:
            type: integer
            format: int64
        - name: showDetails
          in: query
          description: Optional. If true, will give the complete list
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: user position
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{id}/position/{user}.json:
    get:
      tags:
        - Activity | user position
      description: Get the last position for a user and an image.
      parameters:
        - name: id
          in: path
          description: The image id (Mandatory)
          required: true
          schema:
            type: integer
            format: int64
        - name: user
          in: path
          description: The user id (Mandatory)
          required: true
          schema:
            type: integer
            format: int64
        - name: broadcast
          in: path
          description:
            If set to true, the last position broadcasted by the user will
            be returned
          required: true
          schema:
            type: boolean
        - name: slice
          in: query
          description: The slice id
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: user position
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{id}/preview.{format}:
    get:
      tags:
        - Image | Image instance
      description: Get an image preview
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
        - $ref: "#/components/parameters/query-max-size"
        - $ref: "#/components/parameters/path-image-response-format"
        - name: colormap
          in: query
          description: The absolute path of a colormap file
          required: false
          schema:
            type: string
        - name: inverse
          in: query
          description: True if colors have to be inversed
          required: false
          schema:
            type: integer
            format: int32
        - name: contrast
          in: query
          description: Multiply pixels by contrast
          required: false
          schema:
            type: number
        - name: gamma
          in: query
          description: Apply gamma correction
          required: false
          schema:
            type: number
        - name: bits
          in: query
          description: Output bit depth per channel
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{id}/previous.json:
    get:
      tags:
        - Image | Image instance
      description: Get previous image in project
      summary: Get previous image in project
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ImageInstance"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{id}/review.json:
    put:
      tags:
        - Annotation | Reviewed annotation
      summary: Start image reviewing
      description: Start to review an image. The current user will be the reviewer.
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewedAnnotation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ReviewedAnnotation"
    delete:
      tags:
        - Annotation | Reviewed annotation
      description: Stop image reviewing
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
        - name: cancel
          in: query
          description: "If false, the image will be validated. If true, the image return in unreview status (only if no reviewed annotation) "
          required: true
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewedAnnotation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{id}/reviewedannotation/stats.json:
    get:
      tags:
        - Annotation | Reviewed annotation
      description: Get statistics about reviewed annotation in an image
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewedAnnotation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{id}/sliceinstance.json:
    get:
      tags:
        - Image | Slice instance
      description: List slices for an image
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SliceInstanceCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{id}/thumb.{format}:
    get:
      tags:
        - Image | Image instance
      description: Get an image thumbnail
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
        - $ref: "#/components/parameters/path-image-response-format"
        - $ref: "#/components/parameters/query-max-size"
        - name: colormap
          in: query
          description: The absolute path of a colormap file
          required: false
          schema:
            type: string
        - name: inverse
          in: query
          description: True if colors have to be inversed
          required: false
          schema:
            type: integer
            format: int32
        - name: contrast
          in: query
          description: Multiply pixels by contrast
          required: false
          schema:
            type: number
        - name: gamma
          in: query
          description: Apply gamma correction
          required: false
          schema:
            type: number
        - name: bits
          in: query
          description: Output bit depth per channel
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{id}/track.json:
    get:
      tags:
        - Track
      description: Get all track from an image instance
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrackCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/{id}/{channel}/{zStack}/{time}/sliceinstance.json:
    get:
      tags:
        - Image | Slice instance
      description: Get slice at (C,Z,T) in an image
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
        - name: zStack
          in: path
          description: The zStack index
          required: true
          schema:
            type: integer
        - name: time
          in: path
          description: The time index
          required: true
          schema:
            type: integer
        - name: channel
          in: path
          description: The channel index
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SliceInstance"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageinstance/method/lastopened.json:
    get:
      tags:
        - Image | Image instance
      description: List your last opened images
      parameters:
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      collection:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              format: int64
                              description: "The image instance id"
                            project:
                              type: integer
                              format: int64
                              description: "The project id"
                            instanceFilename:
                              type: string
                              description: The image name in the project
                            date:
                              type: string
                              format: timestamp
                              description: Your last image opening timestamp
                            thumb:
                              type: string
                              description: Image thumb URL
                  - $ref: "#/components/schemas/collection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageserver.json:
    get:
      tags:
        - Image | Image server
      description: List image servers
      parameters:
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageServerCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/imageserver/{id}.json:
    get:
      tags:
        - Image | Image server
      description: Get an image server
      parameters:
        - name: id
          in: path
          description: The image server id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ImageServer"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/ldap/user.json:
    post:
      tags:
        - user
      description: Add an user from the LDAP
      parameters:
        - name: username
          in: query
          description: The username in LDAP
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user"

  /api/ldap/{username}/user.json:
    get:
      tags:
        - user
      description: Check if an user is in the LDAP
      parameters:
        - name: username
          in: path
          description: The username in LDAP
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/ontology.json:
    post:
      tags:
        - Ontology
      description: Add an ontology
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Ontology"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Ontology-write"
    get:
      tags:
        - Ontology
      description: List ontologies
      parameters:
        - name: light
          in: query
          description: "Whether to return a light list (only id and name) or not"
          schema:
            type: boolean
            default: "false"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OntologyCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/ontology/{id}.json:
    get:
      tags:
        - Ontology
      description: Get an ontology
      parameters:
        - $ref: "#/components/parameters/path-ontology-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Ontology"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Ontology
      description: Update an ontology
      parameters:
        - $ref: "#/components/parameters/path-ontology-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Ontology"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Ontology-write"
    delete:
      tags:
        - Ontology
      description: Delete an ontology
      parameters:
        - $ref: "#/components/parameters/path-ontology-id"
        - name: task
          in: query
          description: "The id of the task to update during process"
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Ontology"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/ontology/{ontology}/project.json:
    get:
      tags:
        - Project
      summary: List projects for an ontology
      description: List projects for an ontology, that the current user has access to
      parameters:
        - $ref: "#/components/parameters/path-filter-ontology-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/ontology/{ontology}/term.json:
    get:
      tags:
        - Ontology | Term
      description: List terms in an ontology
      parameters:
        - $ref: "#/components/parameters/path-filter-ontology-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TermCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/ontology/{id}/user.json:
    get:
      tags:
        - Ontology
      description: List ontology users
      parameters:
        - $ref: "#/components/parameters/path-ontology-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
        - name: online
          in: query
          description: If set, only return online users.
          schema:
            type: boolean
            default: "false"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/projectConnection/{id}.json:
    get:
      tags:
        - Activity | Project connection
      description:
        Get the details of a project connection including the actions done
        during a project connection of one user into a project.
      parameters:
        - name: project
          in: path
          description: The project id. Mandatory
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: The project connection id. Mandatory
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: project connection
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project.json:
    post:
      tags:
        - Project
      description: Add a new project
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Project"
    get:
      tags:
        - Project
      summary: List projects
      description: List projects the current user has access to
      parameters:
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
        - $ref: "#/components/parameters/query-sort"
        - $ref: "#/components/parameters/query-sort-order"
        - name: withLastActivity
          in: query
          required: false
          schema:
            type: boolean
            default: "false"
        - name: withMemberCount
          in: query
          required: false
          schema:
            type: boolean
            default: "false"
        - name: withCurrentuserRoles
          in: query
          required: false
          schema:
            type: boolean
            default: "false"
        - name: withDescription
          in: query
          required: false
          schema:
            type: boolean
            default: "false"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}.json:
    get:
      tags:
        - Project
      description: Get a project
      x-code-samples:
        - lang: python
          label: Python
          source: project = Project().fetch(id=1)
        - lang: java
          label: Java
          source: Project.fetch(1);
      parameters:
        - $ref: "#/components/parameters/path-project-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Project
      description: Update a project
      parameters:
        - $ref: "#/components/parameters/path-project-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Project"
    delete:
      tags:
        - Project
      description: Delete a project
      parameters:
        - $ref: "#/components/parameters/path-project-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/admin.json:
    get:
      tags:
        - Project | Member
      description: Get all project managers
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/annotation/download:
    get:
      tags:
        - Annotation
      description: Download an annotation search report for a project
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - name: reviewed
          in: query
          description: Get only reviewed annotation
          required: true
          schema:
            type: boolean
        - name: terms
          in: query
          description: "The annotation terms id (if empty: all terms)"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: users
          in: query
          description: |
            'The annotation users id (if empty: all users). If reviewed flag
            is false then if first user is human, get user annotation.'
          required: true
          schema:
            type: array
            items:
              type: string
        - name: images
          in: query
          description: "The annotation images id (if empty: all images)"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: afterThan
          in: query
          description: "(Optional) Annotations created before this date will not be returned"
          required: true
          schema:
            type: integer
            format: int64
        - name: beforeThan
          in: query
          description: "(Optional) Annotations created after this date will not be returned"
          required: true
          schema:
            type: integer
            format: int64
        - name: format
          in: query
          description: The report format (pdf, xls,...)
          required: true
          schema:
            type: string
      responses:
        "200":
          description: file
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/connectionFrequency.json:
    get:
      tags:
        - Activity | Project connection
      description: Get the number of connection by project
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - name: afterThan
          in: query
          description: The date when counting starts
          required: true
          schema:
            type: string
            format: date
        - name: period
          in: query
          description: The period of counting
          required: true
          schema:
            type: string
      responses:
        "200":
          description: project connection
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/connectionFrequency/{user}.json:
    get:
      tags:
        - Activity | Project connection
      description: Get the number of connection by project
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - $ref: "#/components/parameters/path-filter-user-id"
        - name: afterThan
          in: query
          description: The date when counting starts
          required: true
          schema:
            type: string
            format: date
        - name: period
          in: query
          description: "The period of connections (hour : by hours, day : by days, week : by weeks)"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: project connection
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/connectionHistory/{user}.json:
    get:
      tags:
        - Activity | Project connection
      description: Get the project connections of one user into a project.
      parameters:
        - name: user
          in: path
          description: The user id. Mandatory
          required: true
          schema:
            type: integer
            format: int64
        - name: project
          in: path
          description: The project id. Mandatory
          required: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: An offset. Default value = 0
          required: true
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Limit the project connections. Optionnal
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: project connection
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/creator.json:
    get:
      tags:
        - Project | Member
      description: Get project creator (Only 1 even if response is list)
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{idProject}/defaultlayer.json:
    get:
      tags:
        - Project | Default layer
      description: List all default layers of a project
      parameters:
        - name: idProject
          in: path
          description: The id of project
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCollection-default-layer"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    post:
      tags:
        - Project | Default layer
      description: Add a default layer
      parameters:
        - name: idProject
          in: path
          description: The id of project
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectDefaultLayer"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProjectDefaultLayer"

  /api/project/{idProject}/defaultlayer/{id}.json:
    get:
      tags:
        - Project | Default layer
      description: Get a default layer
      parameters:
        - name: id
          in: path
          description: The default layer id
          required: true
          schema:
            type: integer
            format: int64
        - name: idProject
          in: path
          description: The id of project
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectDefaultLayer"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Project | Default layer
      description: Update a default layer
      parameters:
        - name: id
          in: path
          description: The default layer id
          required: true
          schema:
            type: integer
            format: int64
        - name: idProject
          in: path
          description: The id of project
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectDefaultLayer"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProjectDefaultLayer"
    delete:
      tags:
        - Project | Default layer
      description: Delete an default layer
      parameters:
        - name: id
          in: path
          description: The default layer id
          required: true
          schema:
            type: integer
            format: int64
        - name: idProject
          in: path
          description: The id of project
          required: true
          schema:
            type: integer
            format: int64
        - name: task
          in: query
          description: "(Optional, default:null) The id of the task to update during process"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectDefaultLayer"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/imageconsultation/count.json:
    get:
      tags:
        - Activity | Image consultation
      description: Get the number of image consultations in the specified project
      parameters:
        - name: project
          in: path
          description: The identifier of the project
          required: true
          schema:
            type: integer
            format: int64
        - name: startDate
          in: query
          description: Only image consultations after this date will be counted (optional)
          required: true
          schema:
            type: integer
            format: int64
        - name: endDate
          in: query
          description: Only image consultations before this date will be counted (optional)
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: image consultation
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/imageinstance.json:
    get:
      tags:
        - Image | Image instance
      description: List images in a project
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - $ref: "#/components/parameters/query-sort"
        - $ref: "#/components/parameters/query-sort-order"
        - name: withLastActivity
          in: query
          description: "Return the last consultation of current user in each image."
          required: false
          schema:
            type: boolean
            default: "false"
        - name: light
          in: query
          description: |
            If true, the returned list will only
            contain id, instanceFilename and blindedName properties.
            Not compatible with withLastActivity parameters
          schema:
            type: boolean
            default: "false"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageInstanceCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/invitation.json:
    post:
      tags:
        - Project | Member
      description: Invite a not yer existing user to the project
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - name: json
          in: query
          description: The user name and email of the invited user
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Project"

  /api/project/{id}/last/{max}.json:
    get:
      tags:
        - Project | Command
      description: Get the last action for a project
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - name: max
          in: path
          description: The maximum number of actions to return
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          description: command history
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/lastConnection.json:
    get:
      tags:
        - Activity | Project connection
      description: List the last user connections in a project
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          description: project connection
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/lastConnection/{user}.json:
    get:
      tags:
        - Activity | Project connection
      description: List the last user connections in a project for a given user
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - $ref: "#/components/parameters/path-filter-user-id"
      responses:
        "200":
          description: project connection
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/lastImages.json:
    get:
      tags:
        - Activity | Image consultation
      description: List the last consulted image by each user for a given project
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
      responses:
        "200":
          description: image consultation
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/online/user.json:
    get:
      tags:
        - Project | Member
      description:
        List people connected now to the same project and get their openned
        pictures
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          description:
            "List of [id: %iduser%,image: %idImage%, filename: %Image path%,
            originalFilename:%Image filename%, date: %Last position date%]"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{idProject}/representative.json:
    get:
      tags:
        - Project | Representative user
      description: List all representative user of a project
      parameters:
        - name: idProject
          in: path
          description: The id of project
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCollection-representative-user"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    post:
      tags:
        - Project | Representative user
      description: Add a project_representative_user
      parameters:
        - name: idProject
          in: path
          description: The id of project
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectRepresentativeUser"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ProjectRepresentativeUser"

  /api/project/{idProject}/representative/{id}.json:
    get:
      tags:
        - Project | Representative user
      description: Get a project_representative_user
      parameters:
        - name: id
          in: path
          description: The project_representative_user id
          required: true
          schema:
            type: integer
            format: int64
        - name: idProject
          in: path
          description: The id of project
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectRepresentativeUser"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    delete:
      tags:
        - Project | Representative user
      description: Delete a project_representative_user
      parameters:
        - name: id
          in: path
          description: The project_representative_user id
          required: true
          schema:
            type: integer
            format: int64
        - name: idProject
          in: path
          description: The project id relative to the representative
          required: true
          schema:
            type: integer
            format: int64
        - name: iduser
          in: query
          description: An user id
          required: true
          schema:
            type: integer
            format: int64
        - name: task
          in: query
          description: "(Optional, default:null) The id of the task to update during process"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ProjectRepresentativeUser"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/resumeActivity/{user}.json:
    get:
      tags:
        - Project | Member
      description: Return a resume of the activities of a user into a project
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - $ref: "#/components/parameters/path-filter-user-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/reviewedannotation/count.json:
    get:
      tags:
        - Annotation | Reviewed annotation
      description: Count the number of annotation in the project
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - name: startDate
          in: query
          description: Only count the annotations created after this date (optional)
          required: true
          schema:
            type: integer
            format: int64
        - name: endDate
          in: query
          description: Only count the annotations created before this date (optional)
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "[total:x]"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/reviewedannotation/download:
    get:
      tags:
        - Annotation | Reviewed annotation
      description: Download a reviewed annotation report for a project
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - name: terms
          in: query
          description: "The annotation terms id (if empty: all terms)"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: reviewusers
          in: query
          description: "The annotation reviewers id (if empty: all users)"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: images
          in: query
          description: "The annotation images id (if empty: all images)"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: afterThan
          in: query
          description: "(Optional) Annotations created before this date will not be returned"
          required: true
          schema:
            type: integer
            format: int64
        - name: beforeThan
          in: query
          description: "(Optional) Annotations created after this date will not be returned"
          required: true
          schema:
            type: integer
            format: int64
        - name: format
          in: query
          description: The report format (pdf, xls,...)
          required: true
          schema:
            type: string
      responses:
        "200":
          description: file
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/term.json:
    get:
      tags:
        - Ontology | Term
      description: List terms in a project
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TermCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/track.json:
    get:
      tags:
        - Track
      description: Get all track from a project
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrackCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/user.json:
    get:
      tags:
        - Project | Member
      description:
        Get all project users. Online flag may be set to get only online
        users
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - name: online
          in: query
          description: "(Optional, default false) Get only online users for this project"
          required: true
          schema:
            type: boolean
        - name: showJob
          in: query
          description: "(Optional, default false) Also show the users job for this project"
          required: true
          schema:
            type: boolean
        - name: withLastImage
          in: query
          description: "(Optional, default false) Show the last image seen by each user in this project"
          required: true
          schema:
            type: boolean
        - name: withLastConsultation
          in: query
          description: "(Optional, default false) Show the last consultation of this project by each user"
          required: true
          schema:
            type: boolean
        - name: withNumberConsultations
          in: query
          description: "(Optional, default false) Show the number of consultations of this project by each user"
          required: true
          schema:
            type: boolean
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    post:
      tags:
        - Project | Member
      description: Add users in a project as simple 'user'
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - name: users
          in: query
          description: The users ids
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: empty
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
    delete:
      tags:
        - Project | Member
      description:
        Delete users from a project (also delete the manager role if the
        user was one)
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - name: users
          in: query
          description: The users ids
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: empty
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/user/{iduser}/admin.json:
    post:
      tags:
        - Project | Member
      description: Add user in project manager list
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - name: iduser
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: empty
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
    delete:
      tags:
        - Project | Member
      description: Delete user from project manager list
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - name: iduser
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: empty
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/user/{user}/imageconsultation.json:
    get:
      tags:
        - Activity | Image consultation
      description: Get the last consultations of an user into a project
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - $ref: "#/components/parameters/path-filter-user-id"
      responses:
        "200":
          description: image consultation
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/users/representative.json:
    get:
      tags:
        - Project | Member
      description: Get all project representatives
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/user/{iduser}.json:
    post:
      tags:
        - Project | Member
      description: Add user in a project as simple 'user'
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - name: iduser
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: empty
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
    delete:
      tags:
        - Project | Member
      description: Delete user from a project as simple 'user'
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - name: iduser
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: empty
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/user/download:
    get:
      tags:
        - Project | Member
      description:
        Download a report (pdf, xls,...) with user listing from a specific
        project
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - name: terms
          in: query
          description: "The annotation terms id (if empty: all terms)"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: users
          in: query
          description: "The annotation users id (if empty: all users)"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: images
          in: query
          description: "The annotation images id (if empty: all images)"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: format
          in: query
          description: The report format (pdf, xls,...)
          required: true
          schema:
            type: string
      responses:
        "200":
          description: file
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/usersActivity.json:
    get:
      tags:
        - Project | Member
      description:
        List all the users of a project with their last activity (opened
        project & image)
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/userannotation/count.json:
    get:
      description: Count the number of annotation in the project
      tags:
        - Annotation | User annotation
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - name: startDate
          in: query
          description: Only count the annotations created after this date (optional)
          required: true
          schema:
            type: integer
            format: int64
        - name: endDate
          in: query
          description: Only count the annotations created before this date (optional)
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                    description: The total number of user annotations in the project
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/userconnection.json:
    post:
      tags:
        - Activity | Project connection
      description: Add a new user connection record to a project
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
      responses:
        "200":
          description: project connection
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"

  /api/project/{project}/userconnection/count.json:
    get:
      tags:
        - Activity | Project connection
      description: Get the number of connections to all projects
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - name: afterThan
          in: query
          description: The date when counting starts
          required: true
          schema:
            type: string
            format: date
        - name: period
          in: query
          description: "The period of connections (hour : by hours, day : by days, week : by weeks)"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: project connection
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{project}/userconnection/{user}.json:
    get:
      tags:
        - Activity | Project connection
      description: Get user connections in a project
      parameters:
        - $ref: "#/components/parameters/path-filter-project-id"
        - $ref: "#/components/parameters/path-filter-user-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          description: project connection
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/userannotation/download:
    get:
      tags:
        - Annotation | User annotation
      description: Download a user annotation report for a project
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - name: terms
          in: query
          description: "The annotation terms id (if empty: all terms)"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: users
          in: query
          description: "The annotation users id (if empty: all users)"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: images
          in: query
          description: "The annotation images id (if empty: all images)"
          required: true
          schema:
            type: array
            items:
              type: string
        - name: afterThan
          in: query
          description: (Optional) Annotations created before this date will not be returned
          required: true
          schema:
            type: integer
            format: int64
        - name: beforeThan
          in: query
          description: (Optional) Annotations created after this date will not be returned
          required: true
          schema:
            type: integer
            format: int64
        - name: format
          in: query
          description: The report format (pdf, xls,...)
          required: true
          schema:
            type: string
      responses:
        "200":
          description: file
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/{id}/userlayer.json:
    get:
      tags:
        - Project | Member
      description:
        Get all user layers available for a project. If image param is
        set, add user job layers. The result depends on the current user and the project
        flag (hideusersLayers,...).
      parameters:
        - $ref: "#/components/parameters/path-project-id"
        - name: image
          in: path
          description: "(Optional) The image id, if set add userjob layers"
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/project/method/lastopened.json:
    get:
      tags:
        - Project
      description: List your last opened projects
      parameters:
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/relation.json:
    get:
      tags:
        - Ontology | Relation
      description: List all relations
      parameters:
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/relation/{id}.json:
    get:
      tags:
        - Ontology | Relation
      description: Get a relation
      parameters:
        - name: id
          in: path
          description: The relation id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Relation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/relation/parent/term.json:
    post:
      tags:
        - Ontology | Relation term
      summary: Add a relation between two terms
      description: Add a relation between two terms. If not set, relation is PARENT
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RelationTerm"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RelationTerm"

  /api/relation/parent/term1/{idterm1}/term2/{idterm2}.json:
    get:
      tags:
        - Ontology | Relation term
      description: Get relation between two terms
      parameters:
        - name: idterm1
          in: path
          description: The first term id
          required: true
          schema:
            type: integer
            format: int64
        - name: idterm2
          in: path
          description: The second term id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RelationTerm"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    delete:
      tags:
        - Ontology | Relation term
      description: Delete a relation between two terms
      parameters:
        - name: idterm1
          in: path
          description: The first term id
          required: true
          schema:
            type: integer
            format: int64
        - name: idterm2
          in: path
          description: The second term id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RelationTerm"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/relation/term/{id}.json:
    get:
      tags:
        - Ontology | Relation term
      description: List relations for a term
      parameters:
        - $ref: "#/components/parameters/path-term-id"
        - name: i
          in: path
          description: The position index (1 or 2) in the relation
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationTermCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/relation/term/{i}/{id}.json:
    get:
      tags:
        - Ontology | Relation term
      description: List relations for a term at position
      parameters:
        - $ref: "#/components/parameters/path-term-id"
        - name: i
          in: path
          description: The position index (1 or 2) in the relation
          required: true
          schema:
            type: integer
            format: int32
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelationTermCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/reviewedannotation.json:
    get:
      tags:
        - Annotation | Reviewed annotation
      description: List reviewed annotations
      parameters:
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewedAnnotationCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/reviewedannotation/{id}.json:
    get:
      tags:
        - Annotation | Reviewed annotation
      description: Get a reviewed annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewedAnnotation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Annotation | Reviewed annotation
      description: Update a reviewed annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewedAnnotation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ReviewedAnnotation"
    delete:
      tags:
        - Annotation | Reviewed annotation
      description: Delete a reviewed annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewedAnnotation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/reviewedannotation/{id}/alphamask.{format}:
    get:
      tags:
        - Annotation | Reviewed annotation
      description: Get a reviewed annotation alpha mask
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
        - $ref: "#/components/parameters/path-image-response-id"
        - name: maxSize
          in: query
          description: Maximum crop size in width and height
          required: false
          schema:
            type: integer
            format: int32
        - name: zoom
          in: query
          description:
            Zoom level in which crop is extracted. Ignored if maxSize is
            set.
          required: false
          schema:
            type: integer
            format: int32
        - name: increaseArea
          in: query
          description:
            Increase crop area by multiplying original crop size by this
            factor.
          required: false
          schema:
            type: number
        - name: complete
          in: query
          description: Do not simplify the annotation shape.
          required: false
          schema:
            type: boolean
        - name: colormap
          in: query
          description: The absolute path of a colormap file
          required: false
          schema:
            type: string
        - name: inverse
          in: query
          description: True if colors have to be inversed
          required: false
          schema:
            type: integer
            format: int32
        - name: contrast
          in: query
          description: Multiply pixels by contrast
          required: false
          schema:
            type: number
        - name: gamma
          in: query
          description: Apply gamma correction
          required: false
          schema:
            type: number
        - name: bits
          in: query
          description: Output bit depth per channel
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/reviewedannotation/{id}/crop.{format}:
    get:
      tags:
        - Annotation | Reviewed annotation
      description: Get a reviewed annotation crop
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
        - $ref: "#/components/parameters/path-image-response-format"
        - name: type
          in: query
          description:
            Type of crop. Allowed values are 'crop' (default behavior if
            not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary
            mask), 'alphaMask (part of crop outside annotation is transparent, requires
            png format)
          required: false
          schema:
            type: string
        - name: draw
          in: query
          description: Equivalent to set type='draw'
          required: false
          schema:
            type: boolean
        - name: mask
          in: query
          description: Equivalent to set type='mask'
          required: false
          schema:
            type: boolean
        - name: alphaMask
          in: query
          description: Equivalent to set type='alphaMask'
          required: false
          schema:
            type: boolean
        - name: maxSize
          in: query
          description: Maximum crop size in width and height
          required: false
          schema:
            type: integer
            format: int32
        - name: zoom
          in: query
          description:
            Zoom level in which crop is extracted. Ignored if maxSize is
            set.
          required: false
          schema:
            type: integer
            format: int32
        - name: increaseArea
          in: query
          description:
            Increase crop area by multiplying original crop size by this
            factor.
          required: false
          schema:
            type: number
        - name: complete
          in: query
          description: Do not simplify the annotation shape.
          required: false
          schema:
            type: boolean
        - name: colormap
          in: query
          description: The absolute path of a colormap file
          required: false
          schema:
            type: string
        - name: inverse
          in: query
          description: True if colors have to be inversed
          required: false
          schema:
            type: integer
            format: int32
        - name: contrast
          in: query
          description: Multiply pixels by contrast
          required: false
          schema:
            type: number
        - name: gamma
          in: query
          description: Apply gamma correction
          required: false
          schema:
            type: number
        - name: bits
          in: query
          description: Output bit depth per channel
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/reviewedannotation/{id}/mask.{format}:
    get:
      tags:
        - Annotation | Reviewed annotation
      description: Get a reviewed annotation binary mask
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
        - $ref: "#/components/parameters/path-image-response-format"
        - name: maxSize
          in: query
          description: Maximum crop size in width and height
          required: false
          schema:
            type: integer
            format: int32
        - name: zoom
          in: query
          description:
            Zoom level in which crop is extracted. Ignored if maxSize is
            set.
          required: false
          schema:
            type: integer
            format: int32
        - name: increaseArea
          in: query
          description:
            Increase crop area by multiplying original crop size by this
            factor.
          required: false
          schema:
            type: number
        - name: complete
          in: query
          description: Do not simplify the annotation shape.
          required: false
          schema:
            type: boolean
        - name: colormap
          in: query
          description: The absolute path of a colormap file
          required: false
          schema:
            type: string
        - name: inverse
          in: query
          description: True if colors have to be inversed
          required: false
          schema:
            type: integer
            format: int32
        - name: contrast
          in: query
          description: Multiply pixels by contrast
          required: false
          schema:
            type: number
        - name: gamma
          in: query
          description: Apply gamma correction
          required: false
          schema:
            type: number
        - name: bits
          in: query
          description: Output bit depth per channel
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/role.json:
    get:
      tags:
        - User | Role
      description: List all roles available on cytomine
      parameters:
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecRoleCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/role/{id}.json:
    get:
      tags:
        - User | Role
      description: Get a role
      parameters:
        - name: id
          in: path
          description: The role id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SecRole"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/signature.json:
    get:
      tags:
        - user
      description: Build a signature string based on params for the current user.
      parameters:
        - name: method
          in: query
          description: The request method action
          required: true
          schema:
            type: string
        - name: content-MD5
          in: query
          description: "(Optional) The request MD5"
          required: true
          schema:
            type: string
        - name: content-type
          in: query
          description: "(Optional) The request content type"
          required: true
          schema:
            type: string
        - name: date
          in: query
          description: "(Optional) The request date"
          required: true
          schema:
            type: string
        - name: queryString
          in: query
          description: "(Optional) The request query string"
          required: true
          schema:
            type: string
        - name: forwardURI
          in: query
          description: "(Optional) The request forward URI"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "[signature:x, publicKey:x]"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/sliceinstance/{id}.json:
    get:
      tags:
        - Image | Slice instance
      description: Get a slice
      parameters:
        - $ref: "#/components/parameters/path-image-instance-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SliceInstance"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/sliceinstance/{id}/annotationindex.json:
    get:
      tags:
        - Annotation | Annotation index
      description: List annotation layer statistics for a slice
      parameters:
        - $ref: "#/components/parameters/path-slice-instance-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationIndexCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/sliceinstance/{slice}/position.json:
    post:
      tags:
        - Activity | user position
      description: Record the position of the current user on an image.
      parameters:
        - name: image
          in: path
          description: The image id (Mandatory if slice not used)
          required: true
          schema:
            type: integer
            format: int64
        - name: slice
          in: path
          description: The slice id (Mandatory if image not used)
          required: true
          schema:
            type: integer
            format: int64
        - name: topLeftX
          in: query
          description: Top Left X coordinate of the user viewport
          required: true
          schema:
            type: number
        - name: topRightX
          in: query
          description: Top Right X coordinate of the user viewport
          required: true
          schema:
            type: number
        - name: bottomLeftX
          in: query
          description: Bottom Left X coordinate of the user viewport
          required: true
          schema:
            type: number
        - name: bottomRightX
          in: query
          description: Bottom Right X coordinate of the user viewport
          required: true
          schema:
            type: number
        - name: topLeftY
          in: query
          description: Top Left Y coordinate of the user viewport
          required: true
          schema:
            type: number
        - name: topRightY
          in: query
          description: Top Right Y coordinate of the user viewport
          required: true
          schema:
            type: number
        - name: bottomLeftY
          in: query
          description: Bottom Left Y coordinate of the user viewport
          required: true
          schema:
            type: number
        - name: bottomRightY
          in: query
          description: Bottom Right Y coordinate of the user viewport
          required: true
          schema:
            type: number
        - name: zoom
          in: query
          description: Zoom level in the user viewport
          required: true
          schema:
            type: integer
            format: int32
        - name: rotation
          in: query
          description: Rotation level in the user viewport
          required: true
          schema:
            type: number
        - name: broadcast
          in: query
          description: Whether or not the user is broadcasting his/her position
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: user position
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"

  /api/sliceinstance/{id}/thumb.{format}:
    get:
      tags:
        - Image | Slice instance
      description: Get a slice thumbnail
      parameters:
        - $ref: "#/components/parameters/path-slice-instance-id"
        - $ref: "#/components/parameters/path-image-response-format"
        - $ref: "#/components/parameters/query-max-size"
        - name: colormap
          in: query
          description: The absolute path of a colormap file
          required: false
          schema:
            type: string
        - name: inverse
          in: query
          description: True if colors have to be inversed
          required: false
          schema:
            type: integer
            format: int32
        - name: contrast
          in: query
          description: Multiply pixels by contrast
          required: false
          schema:
            type: number
        - name: gamma
          in: query
          description: Apply gamma correction
          required: false
          schema:
            type: number
        - name: bits
          in: query
          description: Output bit depth per channel
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/storage.json:
    post:
      tags:
        - Storage
      description: Add a new storage
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Storage"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Storage"
    get:
      tags:
        - Storage
      summary: List storages
      description: List storages you have access to
      parameters:
        - name: all
          in: query
          description: Whether to list all storages thanks to your platform administrator role or only those you are member of
          schema:
            type: boolean
            default: "false"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorageCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/storage/{id}.json:
    get:
      tags:
        - Storage
      description: Get a storage
      parameters:
        - $ref: "#/components/schemas/path-storage-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Storage"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Storage
      description: Update a storage
      parameters:
        - $ref: "#/components/schemas/path-storage-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Storage"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Storage"
    delete:
      tags:
        - Storage
      description: Delete a storage
      parameters:
        - $ref: "#/components/schemas/path-storage-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Storage"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/storage/{id}/user.json:
    get:
      tags:
        - Storage | Member
      description: List storage members
      parameters:
        - $ref: "#/components/schemas/path-storage-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/storage/{id}/user/{iduser}.json:
    post:
      tags:
        - Storage | Member
      description: Add user in a storage
      parameters:
        - $ref: "#/components/schemas/path-storage-id"
        - name: iduser
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: empty
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
    delete:
      tags:
        - Storage | Member
      description: Remove user from a storage
      parameters:
        - $ref: "#/components/schemas/path-storage-id"
        - name: iduser
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: empty
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/tag.json:
    post:
      tags:
        - Metadata | Tag
      description: Add a new tag
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Tag"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Tag"
    get:
      tags:
        - Metadata | Tag
      description: List tags
      parameters:
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/tag_domain_association/{id}.json:
    get:
      tags:
        - Metadata | Tag association
      description: Get a tag-domain association
      parameters:
        - $ref: "#/components/parameters/path-tag-association-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TagDomainAssociation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    delete:
      tags:
        - Metadata | Tag association
      description: Delete a tag-domain association
      parameters:
        - $ref: "#/components/parameters/path-tag-association-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagDomainAssociation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/tag/{id}.json:
    get:
      tags:
        - Metadata | Tag
      description: Get a tag
      parameters:
        - $ref: "#/components/parameters/path-tag-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Tag"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Metadata | Tag
      description: Update a tag
      parameters:
        - $ref: "#/components/parameters/path-tag-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Tag"
    delete:
      tags:
        - Metadata | Tag
      description: Delete a tag
      parameters:
        - $ref: "#/components/parameters/path-tag-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/term.json:
    post:
      tags:
        - Ontology | Term
      description: Add a new term
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Term"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Term"
    get:
      tags:
        - Ontology | Term
      description: List all terms
      parameters:
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TermCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/term/{id}.json:
    get:
      tags:
        - Ontology | Term
      description: Get a term
      parameters:
        - $ref: "#/components/parameters/path-term-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Term"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Ontology | Term
      description: Update a term
      parameters:
        - $ref: "#/components/parameters/path-term-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Term"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Term"
    delete:
      tags:
        - Ontology | Term
      description: Delete a term
      parameters:
        - $ref: "#/components/parameters/path-term-id"
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Term"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/track.json:
    post:
      tags:
        - Track
      description: Add a track in an image
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Track"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Track"

  /api/track/{id}.json:
    get:
      tags:
        - Track
      description: Get a track
      parameters:
        - name: id
          in: path
          description: The track id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Track"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Track
      description: Update a track
      parameters:
        - name: id
          in: path
          description: The track id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Track"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Track"
    delete:
      tags:
        - Track
      description: Delete a track
      parameters:
        - name: id
          in: path
          description: The track id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Track"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/track/{id}/annotationtrack.json:
    get:
      tags:
        - Annotation | Associated track
      description: List associations between an annotation and a track for a track
      parameters:
        - name: id
          in: path
          description: The track id
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationTrackCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/uploadedfile.json:
    post:
      tags:
        - Storage | Uploaded file
      description:
        Add a new uploaded file. This DOES NOT upload the file, just create
        the domain.
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UploadedFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UploadedFile"
    get:
      tags:
        - Storage | Uploaded file
      description: Get all uploaded files made by the current user
      parameters:
        - name: onlyRootsWithDetails
          in: query
          description:
            If set, only return uploaded files which are roots (no parent)
            with supplementary details such global size.
          required: true
          schema:
            type: boolean
        - name: onlyRoots
          in: query
          description: If set, only return uploaded files which are roots (no parent).
          required: true
          schema:
            type: boolean
        - name: parent
          in: query
          description: If set, only return uploaded files having the given parent.
          required: true
          schema:
            type: integer
            format: int64
        - name: root
          in: query
          description:
            If set, only return uploaded files which are children of the
            given root. Returned attributes are a subset of uploaded files attributes.
          required: true
          schema:
            type: integer
            format: int64
        - name: all
          in: query
          description:
            True to list uploaded files for all users the current user has
            access to
          required: true
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UploadedFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/uploadedfile/{id}.json:
    get:
      tags:
        - Storage | Uploaded file
      description: Get an uploaded file
      parameters:
        - name: id
          in: path
          description: The uploaded file id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UploadedFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Storage | Uploaded file
      description: Edit an uploaded file domain (mainly to edit status during upload)
      parameters:
        - name: id
          in: path
          description: The uploaded file id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UploadedFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UploadedFile"
    delete:
      tags:
        - Storage | Uploaded file
      description:
        Delete an uploaded file domain. This do not delete the file on
        disk.
      parameters:
        - name: id
          in: path
          description: The uploaded file id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UploadedFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/uploadedfile/{id}/abstractimage.json:
    get:
      tags:
        - Image | Abstract image
      description: Get an abstract image from its uploaded file
      parameters:
        - name: id
          in: path
          description: The uploaded file id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AbstractImage"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/uploadedfile/{id}/abstractslice.json:
    get:
      tags:
        - Image | Abstract slice
      description: Get all abstract slices for the given uploaded file
      parameters:
        - name: id
          in: path
          description: The uploaded file id
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractSliceCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/uploadedfile/{id}/companionfile.json:
    get:
      tags:
        - Image | Companion file
      description: Get all companion files for the given uploaded file
      parameters:
        - name: id
          in: path
          description: The uploaded file id
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompanionFileCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/uploadedfile/{id}/download:
    get:
      tags:
        - Storage | Uploaded file
      description: Download the uploaded file
      parameters:
        - name: id
          in: path
          description: The uploaded file id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UploadedFile"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/user.json:
    post:
      tags:
        - user
      description: Add a user, by default the sec role 'user' is set
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user"
    get:
      tags:
        - user
      description: Render and returns all users
      parameters:
        - name: publicKey
          in: query
          description: "(Optional) If set, get only user with the public key in param"
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/user/current.json:
    get:
      tags:
        - user
      description: Get current user info
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/user/security_check.json:
    post:
      tags:
        - user
      description: Check a user password for the current user
      parameters:
        - name: password
          in: query
          description: The password
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user"

  /api/user/{id}.json:
    get:
      tags:
        - user
      description: Get a user
      parameters:
        - name: id
          in: path
          description: The user id or the user username
          required: true
          schema:
            type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - user
      description: Edit a user
      parameters:
        - name: id
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user"
    delete:
      tags:
        - user
      description: Delete a user
      parameters:
        - name: id
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/user/{id}/friends.json:
    get:
      tags:
        - user
      description:
        Get all user friend (other user that share same project) for a
        specific user
      parameters:
        - name: id
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
        - name: project
          in: query
          description: The project id
          required: true
          schema:
            type: integer
            format: int64
        - name: offline
          in: query
          description: "(Optional, default false) Get online and offline user"
          required: true
          schema:
            type: boolean
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/user/{id}/imageinstance.json:
    get:
      tags:
        - Image | Image instance
      description: List images for a user
      parameters:
        - $ref: "#/components/parameters/path-filter-user-id"
        - $ref: "#/components/parameters/query-sort"
        - $ref: "#/components/parameters/query-sort-order"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImageInstanceCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/user/{id}/imageinstance/light.json:
    get:
      tags:
        - Image | Image instance
      description: List images for a user (partial response)
      parameters:
        - $ref: "#/components/parameters/path-filter-user-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      collection:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              format: int64
                              description: "The image instance id"
                            project:
                              type: integer
                              format: int64
                              description: "The project id"
                            projectName:
                              type: string
                              description: The project name
                            instanceFilename:
                              type: string
                              description: The image name in the project
                  - $ref: "#/components/schemas/collection"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/user/{id}/password.json:
    put:
      tags:
        - user
      description: Change a user password for a user
      parameters:
        - name: id
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
        - name: password
          in: query
          description: The new password
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user"

  /api/user/{user}/project.json:
    get:
      tags:
        - Project
      summary: List projects for a user
      description: List projects for a user, that the current user has access to
      parameters:
        - $ref: "#/components/parameters/path-filter-user-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/user/{user}/project/light.json:
    get:
      tags:
        - Project
      summary: List projects for a user (partial response)
      description: List projects for a user that the current user has access to. Only project id and name are returned.
      parameters:
        - $ref: "#/components/parameters/path-filter-user-id"
        - name: creator
          in: query
          description: Whether `user` has to be the project creator or not
          schema:
            type: boolean
            default: "false"
        - name: admin
          in: query
          description: Whether `user` has to be a project manager or not
          schema:
            type: boolean
            default: "false"
        - name: user
          in: query
          description: Whether `user` has to be a project contributor or not
          schema:
            type: boolean
            default: "true"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      collection:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              format: int64
                              description: "The project id"
                            name:
                              type: string
                              description: "The project name"
                  - $ref: "#/components/schemas/collection"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/user/{iduser}/reviewedannotation.json:
    post:
      tags:
        - Annotation | Reviewed annotation
      summary: Add a reviewed annotation
      description:
        Add a reviewed annotation. Only use to create a reviewed annotation
        with all json data. Use /annotation/x/review
      parameters:
        - name: iduser
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ReviewedAnnotation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ReviewedAnnotation"

  /api/user/{id}/reviewedannotation/count.json:
    get:
      tags:
        - Annotation | Reviewed annotation
      description: Count the number of reviewed annotation for the current user
      parameters:
        - name: id
          in: path
          description: The user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "[total:x]"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/user/{user}/role.json:
    post:
      tags:
        - User | Associated Role
      description: Get a user role
      parameters:
        - name: user
          in: path
          description: The user id
          required: true
          schema:
            type: string
        - name: role
          in: path
          description: The role id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SecUserSecRole"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SecUserSecRole"
    get:
      tags:
        - User | Associated Role
      description: List all roles for a user
      parameters:
        - name: user
          in: path
          description: The user id
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecUserCollection-sec-role"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/user/{user}/role/{role}.json:
    get:
      tags:
        - User | Associated Role
      description: Get a user role
      parameters:
        - name: user
          in: path
          description: The user id
          required: true
          schema:
            type: string
        - name: role
          in: path
          description: The role id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SecUserSecRole"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    delete:
      tags:
        - User | Associated Role
      description: Delete a user role
      parameters:
        - name: user
          in: path
          description: The user id
          required: true
          schema:
            type: string
        - name: role
          in: path
          description: The role id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SecUserSecRole"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/user/{user}/role/{role}/define.json:
    put:
      tags:
        - User | Associated Role
      description:
        Define a role for a user. If admin is defined, user will have admin,user,guest.
        If user is defined, user will have user,guest, etc. Role may be create or
        remove
      parameters:
        - name: user
          in: path
          description: The user id
          required: true
          schema:
            type: string
        - name: role
          in: path
          description: The role id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SecUserSecRole"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SecUserSecRole"

  /api/user/{id}/userannotation/count.json:
    get:
      tags:
        - Annotation | User annotation
      description: Count the number of annotation for the current user
      parameters:
        - name: id
          in: path
          description: The user id (mandatory)
          required: true
          schema:
            type: integer
            format: int64
        - name: project
          in: path
          description: The project id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                    description: The total number of user annotations for the user
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/userannotation.json:
    post:
      tags:
        - Annotation | User annotation
      description: Add user annotation(s)
      parameters:
        - name: "POST JSON: project"
          in: path
          description: The project id where this annotation belongs
          required: true
          schema:
            type: integer
            format: int64
        - name: "POST JSON: image"
          in: query
          description: The image instance id where this annotation belongs
          required: true
          schema:
            type: integer
            format: int64
        - name: "POST JSON: location"
          in: query
          description: The WKT geometrical description of the annotation
          required: true
          schema:
            type: string
        - name: "POST JSON: term"
          in: query
          description: Term id to associate with this annotation
          required: false
          schema:
            type: integer
            format: int64
        - name: "POST JSON: minPoint"
          in: query
          description: Minimum number of point that constitute the annotation
          required: false
          schema:
            type: integer
            format: int32
        - name: "POST JSON: maxPoint"
          in: query
          description: Maximum number of point that constitute the annotation
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user-annotation"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user-annotation"
    get:
      tags:
        - Annotation | User annotation
      description: List user annotation (partial response)
      parameters:
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCollection-annotation"
          description: OK
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/userannotation/{id}.json:
    get:
      tags:
        - Annotation | User annotation
      description: Get a user annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user-annotation"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
    put:
      tags:
        - Annotation | User annotation
      description: Update a user annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user-annotation"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user-annotation"
    delete:
      tags:
        - Annotation | User annotation
      description: Delete a user annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/user-annotation"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/userannotation/{id}/alphamask.{format}:
    get:
      tags:
        - Annotation | User annotation
      description: Get a user annotation alpha mask
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
        - $ref: "#/components/parameters/path-image-response-format"
        - name: maxSize
          in: query
          description: Maximum crop size in width and height
          required: false
          schema:
            type: integer
            format: int32
        - name: zoom
          in: query
          description:
            Zoom level in which crop is extracted. Ignored if maxSize is
            set.
          required: false
          schema:
            type: integer
            format: int32
        - name: increaseArea
          in: query
          description:
            Increase crop area by multiplying original crop size by this
            factor.
          required: false
          schema:
            type: number
        - name: complete
          in: query
          description: Do not simplify the annotation shape.
          required: false
          schema:
            type: boolean
        - name: colormap
          in: query
          description: The absolute path of a colormap file
          required: false
          schema:
            type: string
        - name: inverse
          in: query
          description: True if colors have to be inversed
          required: false
          schema:
            type: integer
            format: int32
        - name: contrast
          in: query
          description: Multiply pixels by contrast
          required: false
          schema:
            type: number
        - name: gamma
          in: query
          description: Apply gamma correction
          required: false
          schema:
            type: number
        - name: bits
          in: query
          description: Output bit depth per channel
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/userannotation/{id}/comment.json:
    post:
      tags:
        - Annotation | Comment
      description: Comment a user annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedAnnotation"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"
        "409":
          $ref: "#/components/responses/conflict"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SharedAnnotation"
    get:
      tags:
        - Annotation | Comment
      description: List comments for a user annotation
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SharedAnnotationCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/userannotation/{annotation}/comment/{id}.json:
    get:
      tags:
        - Annotation | Comment
      description: Get a user annotation comment
      parameters:
        - name: annotation
          in: path
          description: The annotation id
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: The comment id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SharedAnnotation"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/userannotation/{id}/crop.{format}:
    get:
      tags:
        - Annotation | User annotation
      description: Get a user annotation crop
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
        - $ref: "#/components/parameters/path-image-response-format"
        - name: type
          in: query
          description:
            Type of crop. Allowed values are 'crop' (default behavior if
            not set), 'draw' (the shape is drawn in the crop), 'mask' (annotation binary
            mask), 'alphaMask (part of crop outside annotation is transparent, requires
            png format)
          required: false
          schema:
            type: string
        - name: draw
          in: query
          description: Equivalent to set type='draw'
          required: false
          schema:
            type: boolean
        - name: mask
          in: query
          description: Equivalent to set type='mask'
          required: false
          schema:
            type: boolean
        - name: alphaMask
          in: query
          description: Equivalent to set type='alphaMask'
          required: false
          schema:
            type: boolean
        - name: maxSize
          in: query
          description: Maximum crop size in width and height
          required: false
          schema:
            type: integer
            format: int32
        - name: zoom
          in: query
          description:
            Zoom level in which crop is extracted. Ignored if maxSize is
            set.
          required: false
          schema:
            type: integer
            format: int32
        - name: increaseArea
          in: query
          description:
            Increase crop area by multiplying original crop size by this
            factor.
          required: false
          schema:
            type: number
        - name: complete
          in: query
          description: Do not simplify the annotation shape.
          required: false
          schema:
            type: boolean
        - name: colormap
          in: query
          description: The absolute path of a colormap file
          required: false
          schema:
            type: string
        - name: inverse
          in: query
          description: True if colors have to be inversed
          required: false
          schema:
            type: integer
            format: int32
        - name: contrast
          in: query
          description: Multiply pixels by contrast
          required: false
          schema:
            type: number
        - name: gamma
          in: query
          description: Apply gamma correction
          required: false
          schema:
            type: number
        - name: bits
          in: query
          description: Output bit depth per channel
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/userannotation/{id}/mask.{format}:
    get:
      tags:
        - Annotation | User annotation
      description: Get a user annotation mask
      parameters:
        - $ref: "#/components/parameters/path-annotation-id"
        - $ref: "#/components/parameters/path-image-response-format"
        - name: maxSize
          in: query
          description: Maximum crop size in width and height
          required: false
          schema:
            type: integer
            format: int32
        - name: zoom
          in: query
          description:
            Zoom level in which crop is extracted. Ignored if maxSize is
            set.
          required: false
          schema:
            type: integer
            format: int32
        - name: increaseArea
          in: query
          description:
            Increase crop area by multiplying original crop size by this
            factor.
          required: false
          schema:
            type: number
        - name: complete
          in: query
          description: Do not simplify the annotation shape.
          required: false
          schema:
            type: boolean
        - name: colormap
          in: query
          description: The absolute path of a colormap file
          required: false
          schema:
            type: string
        - name: inverse
          in: query
          description: True if colors have to be inversed
          required: false
          schema:
            type: integer
            format: int32
        - name: contrast
          in: query
          description: Multiply pixels by contrast
          required: false
          schema:
            type: number
        - name: gamma
          in: query
          description: Apply gamma correction
          required: false
          schema:
            type: number
        - name: bits
          in: query
          description: Output bit depth per channel
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          $ref: "#/components/responses/image"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/userannotation/{idannotation}/user/{iduser}/term.json:
    get:
      tags:
        - Annotation | Associated term
      description: List associated terms to a user annotation done by a user
      parameters:
        - name: idannotation
          in: path
          description: The annotation id
          required: true
          schema:
            type: integer
            format: int64
        - name: iduser
          in: path
          description: "(Optional) Only get term from this user id (may be a job)"
          required: true
          schema:
            type: integer
            format: int64
        - $ref: "#/components/parameters/pagination-max"
        - $ref: "#/components/parameters/pagination-offset"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationTermCollection"
          description: ""
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /api/userkey/{publicKey}/keys.json:
    get:
      tags:
        - user
      description:
        Get the public and private key for a user. Request only available
        for Admin or if user is the current user
      parameters:
        - name: id
          in: path
          description: "(Optional) The user id"
          required: true
          schema:
            type: integer
            format: int64
        - name: publicKey
          in: path
          description: "(Optional) The user key"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "[publicKey:x, privateKey:x]"
        "400":
          $ref: "#/components/responses/bad-request"
        "401":
          $ref: "#/components/responses/unauthorized"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/not-found"

  /server/ping:
    get:
      summary: Ping the server
      description: Returns server health information.
      tags:
        - Health Check
      operationId: ping
      responses:
        "200":
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  alive:
                    type: boolean
                    example: true
                  serverID:
                    type: string
                    example: "default"
                  serverURL:
                    type: string
                    example: "http://127.0.0.1"
                  version:
                    type: string
                    example: "5.2.0"

  /status.json:
    get:
      summary: Check server health status
      description: Returns basic server health information.
      tags:
        - Health Check
      operationId: status
      responses:
        "200":
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  alive:
                    type: boolean
                    example: true
                  serverURL:
                    type: string
                    example: "http://127.0.0.1"
                  version:
                    type: string
                    example: "5.2.0"

  /user/current/keys:
    get:
      summary: Get key pair for current user
      tags:
        - Legacy user keys
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legacy-user-keys"
    post:
      summary: Regenerate key pair for current user
      description: |
        Previous pair is invalidated.
      tags:
        - Legacy user keys
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/legacy-user-keys"

components:
  parameters:
    account-reference:
      name: id
      in: path
      description: The account reference
      required: true
      schema:
        type: string
        format: uuid
    pagination-max:
      name: max
      in: query
      description: |
        Pagination: number of items per page. Use `0` to disable pagination.
      required: false
      schema:
        type: integer
        format: int32
        default: "0"
    pagination-offset:
      name: offset
      in: query
      description: |
        Pagination: offset of the first returned item. The first item has offset `0`.
      required: false
      schema:
        type: integer
        format: int32
        default: "0"
    path-annotation-id:
      name: id
      in: path
      description: The annotation identifier
      required: true
      schema:
        type: integer
        format: int64
    path-annotation-layer-id:
      name: id
      in: path
      description: The annotation layer identifier
      required: true
      schema:
        type: integer
        format: int64
    path-filter-project-id:
      name: project
      in: path
      description: The project id
      required: true
      schema:
        type: integer
        format: int64
    path-image-instance-id:
      name: id
      in: path
      description: The image instance identifier
      required: true
      schema:
        type: integer
        format: int64
    path-image-response-format:
      name: format
      in: path
      description: The expected image format
      required: true
      schema:
        type: string
        enum:
          - jpg
          - png
    path-project-id:
      name: id
      in: path
      description: The project id
      required: true
      schema:
        type: integer
        format: int64
    query-sort:
      name: sort
      in: query
      description: Attribute used to sort items
      required: false
      schema:
        type: string
        default: "created"
    query-sort-order:
      name: order
      in: query
      description: Sort order
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: "desc"
    path-domain-class-name:
      name: domainClassName
      in: path
      description: The domain class name (domain `class` attribute)
      required: true
      schema:
        type: string
    path-domain-ident:
      name: domainIdent
      in: path
      description: The domain identifier (domain `id` attribute)
      required: true
      schema:
        type: integer
        format: int64
    path-abstract-image-id:
      name: id
      in: path
      description: The abstract image id
      required: true
      schema:
        type: integer
        format: int64
    path-slice-instance-id:
      name: id
      in: path
      description: The slice instance id
      required: true
      schema:
        type: integer
        format: int64
    path-ontology-id:
      name: id
      in: path
      description: The ontology id
      required: true
      schema:
        type: integer
        format: int64
    path-term-id:
      name: id
      in: path
      description: The term id
      required: true
      schema:
        type: integer
        format: int64
    path-storage-id:
      name: id
      in: path
      description: The storage id
      required: true
      schema:
        type: integer
        format: int64
    path-tag-id:
      name: id
      in: path
      description: The tag id
      required: true
      schema:
        type: integer
        format: int64
    path-tag-association-id:
      name: id
      in: path
      description: The tag association id
      required: true
      schema:
        type: integer
        format: int64
    path-attached-file-id:
      name: id
      in: path
      description: The attached file id
      required: true
      schema:
        type: integer
        format: int64
    path-property-id:
      name: id
      in: path
      description: The property id
      required: true
      schema:
        type: integer
        format: int64
    path-property-key:
      name: id
      in: path
      description: The property key
      required: true
      schema:
        type: string
    path-filter-user-id:
      name: user
      in: path
      description: The user id
      required: true
      schema:
        type: integer
        format: int64
    path-filter-ontology-id:
      name: ontology
      in: path
      description: The ontology id
      required: true
      schema:
        type: integer
        format: int64
    path-associated-label:
      name: label
      in: path
      description: The associated image label
      required: true
      schema:
        type: string
        enum:
          - macro
          - thumb
          - label
    query-max-size:
      name: maxSize
      in: query
      description: The maximum size of the largest side of the image response
      required: false
      schema:
        type: integer
        format: int32
        default: 256

  responses:
    bad-request:
      description: The request was invalid or cannot be served
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Bad request"
    conflict:
      description: The resource already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Conflict"
    forbidden:
      description: Not enough permissions to access the resource
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Forbidden"
    not-found:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resource not found"
    unauthorized:
      description: The request requires user authentication
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    image:
      description: Image
      content:
        image/jpeg:
          schema:
            $ref: "#/components/schemas/generic-image"
        image/png:
          schema:
            $ref: "#/components/schemas/generic-image"

  schemas:
    annotation:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/attribute-id"
        annotationLayer:
          type: integer
          description: The layer to which this annotation belongs.
          format: int64
        location:
          type: string
          format: byte
          description: Binary-encoded annotation geometry data (base64-encoded)
    annotation-layer:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/attribute-id"
        name:
          type: string
          description: The name of the annotation layer
    attribute-class:
      type: string
      description: The resource full class name
      readOnly: true
    attribute-created:
      type: string
      description: The timestamp when the resource was created.
      format: date-time
      readOnly: true
    attribute-deleted:
      type: string
      description: The timestamp when the resource was marked as deleted.
      format: date-time
      readOnly: true
    attribute-id:
      type: integer
      description: The resource identifier
      format: int64
      readOnly: true
    attribute-updated:
      type: string
      description: The timestamp of the last update to the resource.
      format: date-time
      readOnly: true
    generic-image:
      type: string
      format: binary
      example: (binary image)
      description: Binary image
    legacy-user-keys:
      type: object
      properties:
        primaryKey:
          type: string
          format: uuid
        secondaryKey:
          type: string
          format: uuid
    task-run-layer:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/attribute-id"
        annotationLayer:
          type: integer
          description: The layer to which this annotation belongs.
          format: int64
        image:
          type: integer
          description: The image instance identifier to which this layer belongs.
          format: int64
        taskRun:
          type: integer
          description: The task run identifier to which this layer belongs.
          format: int64
        xOffset:
          type: integer
          description: The x offset of the annotation in the image instance.
          format: int32
        yOffset:
          type: integer
          description: The y offset of the annotation in the image instance.
          format: int32
    user-annotation:
      description: An annotation created by a user
      type: object
      properties:
        area:
          type: number
          description: The annotation area
          readOnly: true
        areaUnit:
          type: integer
          description: The unit used for area (pixels²=1,micron²=3)
          format: int32
          readOnly: true
        centroid:
          type: object
          description: X,Y coord of the annotation centroid
          readOnly: true
        class:
          $ref: "#/components/schemas/attribute-class"
        countReviewedAnnotations:
          type: integer
          description: The number of reviewed annotations for this annotation
          format: int32
          readOnly: true
        created:
          $ref: "#/components/schemas/attribute-created"
        cropURL:
          type: string
          description: URL to get the annotation crop
          readOnly: true
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        geometryCompression:
          type: number
          description:
            The geometry compression rate used to simplify the annotation
            (during creation)
        id:
          $ref: "#/components/schemas/attribute-id"
        image:
          type: integer
          description: The image on which the annotation is drawn
          format: int64
        imageURL:
          type: string
          description: URL to go to the image
          readOnly: true
        location:
          type: string
          description: The annotation geometry (shape) in WKT
        nbComments:
          type: integer
          description: The number of comments added by a user on this annotation
          format: int64
          readOnly: true
        perimeter:
          type: number
          description: The annotation perimeter
          readOnly: true
        perimeterUnit:
          type: integer
          description: The unit used for perimeter (pixels=0,mm=2)
          format: int32
          readOnly: true
        project:
          type: integer
          description: The project in which the annotation is drawn
          format: int64
        reviewed:
          type: boolean
          description: True if annotation has at least one review
          readOnly: true
        slice:
          type: integer
          description: The slice on which the annotation is drawn
          format: int64
        smallCropURL:
          type: string
          description: URL to get a small annotation crop (<256px)
          readOnly: true
        term:
          type: array
          description: List of term id mapped with this annotation
          default: "[]"
          items:
            type: string
        updated:
          $ref: "#/components/schemas/attribute-updated"
        url:
          type: string
          description: URL to view the annotation on the image
          readOnly: true
        user:
          type: integer
          description: user id who created this annotation
          format: int64
      required:
        - image
        - location
        - project
        - slice
        - user
    collection:
      type: object
      properties:
        size:
          type: integer
          format: int64
          description: The number of items in the collection
        totalPages:
          type: integer
          format: int64
          description: The number of pages according to the current pagination parameters
        perPage:
          type: integer
          format: int64
          description: The number of items per page according to the current pagination parameters
        offset:
          type: integer
          format: int64
          description: The current offset in the pagination according to the current pagination parameters
    DomainIdent:
      type: integer
      description: The domain identifier (domain `id` attribute)
      format: int64
      readOnly: true
    DomainClassName:
      type: string
      description: The domain class name (domain `class` attribute)
      readOnly: true
    AnnotationCount:
      type: object
      properties:
        total:
          type: int
          format: int64
          description: The number of annotations
    AbstractImage:
      description: A N-dimensional image stored on disk
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        filename:
          type: string
          description: Similar to original filename.
          readOnly: true
        originalFilename:
          type: string
          description: The image filename (will be show in GUI)
          readOnly: true
        scanner:
          type: integer
          description: The instrument that digitalize the image
          format: int64
          default: 0 or null if domain
        sample:
          type: integer
          description: The source of the image (human, annimal,...)
          format: int64
          default: 0 or null if domain
        uploadedFile:
          type: integer
          description: The underlying file stored on disk
          format: int64
        path:
          type: string
          description: The internal path of the file
          readOnly: true
        contentType:
          type: string
          description: The image content type
          readOnly: true
        width:
          type: integer
          description: The N-dimensional image width, in pixels (X)
          format: int32
          default: "-1"
        height:
          type: integer
          description: The N-dimensional image height, in pixels (Y)
          format: int32
          default: "-1"
        depth:
          type: integer
          description: The N-dimensional image depth, in z-slices (Z)
          format: int32
          default: "1"
        duration:
          type: integer
          description: The N-dimensional image duration, in frames (T)
          format: int32
          default: "1"
        channels:
          type: integer
          description: The N-dimensional image channels (C)
          format: int32
          default: "1"
        dimensions:
          type: string
          description:
            "Textual dimensions of the image: XY, XYZ, XYC, XYT, XYZC,
            XYZT, XYCT, XYCZT"
          readOnly: true
        physicalSizeX:
          type: number
          description: Physical size of a pixel along X axis
        physicalSizeY:
          type: number
          description: Physical size of a pixel along Y axis
        physicalSizeZ:
          type: number
          description: Physical size of a pixel along Z axis
        fps:
          type: number
          description: The number of frames per second
        zoom:
          type: integer
          description: The number of zooms available in the image
          format: int32
          readOnly: true
        resolution:
          type: number
          description: The image resolution (microm per pixel)
        magnification:
          type: integer
          description: The image max zoom
          format: int32
        bitPerSample:
          type: integer
          description: The number of bits per sample (color)
          format: int32
        samplePerPixel:
          type: integer
          description: The number of samples (colors) per pixel
          format: int32
        colorspace:
          type: string
          description: The image colorspace
        thumb:
          type: string
          description: URL to get abstract image short view (htumb)
          readOnly: true
        preview:
          type: string
          description: URL to get image preview
          readOnly: true
        macroURL:
          type: string
          description: URL to get image macros
          readOnly: true
        bitDepth:
          type: integer
          description: The image bit depth (bits per channel)
          format: int32
          writeOnly: true
        metadataUrl:
          type: string
          description: URL to get image file metadata
        user:
          type: integer
          description: The image owner
          format: int64
          default: current user
          writeOnly: true
      required:
        - uploadedFile
        - resolution
        - magnification
        - bitPerSample
        - samplePerPixel
        - colorspace
        - bitDepth
    AbstractSlice:
      description: An abstract slice of a N-dimensional image
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        uploadedFile:
          type: integer
          description: The underlying file for the slice
          format: int64
        imageServerUrl:
          type: string
          description: URL of the server with tiles
          readOnly: true
        path:
          type: string
          description: The internal path of the file
          readOnly: true
        image:
          type: integer
          description: The abstract image encapsulating this slice
          format: int64
        mime:
          type: integer
          description: The Cytomine internal slice mime type.
          format: int64
        channel:
          type: integer
          description:
            The channel this plane is for. No unit. This is numbered from
            0.
          format: int32
        zStack:
          type: integer
          description:
            The Z-section this plane is for. No unit. This is numbered
            from 0.
          format: int32
        time:
          type: integer
          description:
            The timepoint this plane is for. No unit. This is numbered
            from 0.
          format: int32
        channelName:
          type: string
          description: Optional channel name
        rank:
          type: integer
          description:
            The rank of the slice computed as ['channel' + 'image.channels'
            * ('zStack' + 'image.depth' * 'time')]
          format: int32
          readOnly: true
      required:
        - uploadedFile
        - image
        - mime
        - channel
        - zStack
        - time
        - channelName

    AnnotationFilter:
      description: Define a set of filter for annotation listing
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        name:
          type: string
          description: The filter name
        user:
          type: integer
          description: The user that create the filter (auto field)
          format: int64
          readOnly: true
        project:
          type: integer
          description: The project of the filter
          format: int64
        terms:
          type: array
          description: Terms filter id
          default: "[]"
          items:
            type: string
        users:
          type: array
          description: users filter id
          default: "[]"
          items:
            type: string
      required:
        - name
        - project
    AnnotationIndex:
      description: Slice annotation layer statistics
      type: object
      properties:
        user:
          type: integer
          description: The layer owner user id
          format: int64
          readOnly: true
        slice:
          type: integer
          description: The slice id
          format: int64
          readOnly: true
        countAnnotation:
          type: integer
          description: The number of annotations in the layer in the slice
          format: int64
          readOnly: true
        countReviewedAnnotation:
          type: integer
          description: The number of reviewed annotations in the layer in the slice
          format: int64
          readOnly: true
    AnnotationTerm:
      description:
        Term added to an annotation by a real user (not a job!). Many user
        can add a term to a single annotation (not only the user that created this
        annotation)
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        userannotation:
          type: integer
          description: The annotation id
          format: int64
        term:
          type: integer
          description: The term id
          format: int64
        user:
          type: integer
          description: The user id
          format: int64
          default: current user
      required:
        - userannotation
        - term
    AnnotationTrack:
      description: Link between an annotation and a track
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        annotationIdent:
          type: integer
          description: Annotation identifier
          format: int64
        annotationClassName:
          type: string
          description: Annotation class name
        track:
          type: integer
          description: The track the association is linked to
          format: int64
        slice:
          type: integer
          description: The slice where the annotation is
          format: int64
      required:
        - annotationIdent
        - annotationClassName
        - track
        - slice
    AttachedFile:
      description:
        A file that may be attached to any Cytomine domain. Usefull to
        include file into description.
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        domainIdent:
          $ref: "#/components/schemas/DomainIdent"
        domainClassName:
          $ref: "#/components/schemas/DomainClassName"
        url:
          type: string
          description: Attached file download URL
          readOnly: true
        filename:
          type: string
          description: The filename, with its extension
      required:
        - domainIdent
        - domainClassName
        - filename
    CompanionFile:
      description: A secondary file related to an abstract image
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        uploadedFile:
          type: integer
          description: The underlying file
          format: int64
        path:
          type: string
          description: The internal path of the file
          readOnly: true
        image:
          type: integer
          description: The abstract image using this file
          format: int64
        originalFilename:
          type: string
          description: The original filename from the upload
        filename:
          type: string
          description: A user-friendly filename
        type:
          type: string
          description: The type of file
        progress:
          type: integer
          description: The file conversion progress
          format: int32
        status:
          type: integer
          description: File status
          format: int32
          readOnly: true
        statusText:
          type: string
          description: Textual file status
          readOnly: true
      required:
        - uploadedFile
        - image
        - originalFilename
        - filename
        - type
    Description:
      description: A domain description (text, image,...).
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        domainIdent:
          $ref: "#/components/schemas/DomainIdent"
        domainClassName:
          $ref: "#/components/schemas/DomainClassName"
        data:
          type: string
          description: The description content
      required:
        #        - domainClassName
        #        - domainIdent
        - data
    Group:
      description: A group is a set of users. A user may be in many groups
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        name:
          type: string
          description: The group name
        gid:
          type: string
          description: The id for external connection (LDAP, etc.)
      required:
        - name
        - gid
    ImageFilter:
      description: An image filter applies image operations (Binary, Eosin,...)
      type: object
      properties:
        id:
          $ref: "#/components/schemas/attribute-id"
        name:
          type: string
          description: The filter name
          readOnly: true
        imagingServer:
          type: string
          description: The URL of the imaging server
          readOnly: true
        baseUrl:
          type: string
          description: The URL path of the filter on the imaging server
          readOnly: true
        class:
          type: string
          description: The full class name of the domain
        created:
          type: string
          description: The date of the domain creation
          format: date
        deleted:
          type: string
          description: When domain was removed from Cytomine
          format: date
        updated:
          type: string
          description: The date of the domain modification
          format: date
    ImageFilterProject:
      description: An image filter can be link to many projects
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        imageFilter:
          type: integer
          description: The filter
          format: int64
        project:
          type: integer
          description: The project
          format: int64
        imagingServer:
          type: string
          description: The URL of the imaging server
          readOnly: true
        baseUrl:
          type: string
          description: The URL path of the filter on the imaging server
          readOnly: true
        name:
          type: string
          description: The filter name
          readOnly: true
      required:
        - imageFilter
        - project
    ImageGroup:
      description: A group of image from the same source with different dimension
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        name:
          type: string
          description: The name of the project
        project:
          type: integer
          description: The image group project
          format: int64
        thumb:
          type: object
      required:
        - name
        - project
    ImageInstance:
      description: An image in a project
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        baseImage:
          type: integer
          description: The underlying abstract image
          format: int64
        project:
          type: integer
          description: The project that owns the image
          format: int64
        user:
          type: integer
          description: The user that added the image to the project
          format: int64
          readOnly: true
        instanceFilename:
          type: string
          description: The name for the image in the project
        originalFilename:
          type: string
          description: The name of the underlying abstract image
          readOnly: true
        #        filename:
        #          type: string
        #          description: Similar to originalFilename
        #          readOnly: true
        #        blindedName:
        #          type: object
        path:
          type: string
          description: The image internal path on disk
          readOnly: true
        contentType:
          type: string
          description: The image content type
          readOnly: true
        #        sample:
        #          type: integer
        #          description: The source of the image (human, animal,...)
        #          format: int64
        #          default: 0 or null if domain
        width:
          type: integer
          description: The image width in pixels along the X-axis
          format: int32
          readOnly: true
        height:
          type: integer
          description: The image height in pixels along the Y-axis
          format: int32
          readOnly: true
        depth:
          type: integer
          description: The image depth in z-slices along the Z-axis
          format: int32
          readOnly: true
        duration:
          type: integer
          description: The image duration in frames along the T-axis
          format: int32
          readOnly: true
        channels:
          type: integer
          description: The number of image channels
          format: int32
          readOnly: true
        physicalSizeX:
          type: number
          description: The physical size of a pixel along X axis in µm/pixel
        physicalSizeY:
          type: number
          description: The physical size of a pixel along Y axis in µm/pixel
        physicalSizeZ:
          type: number
          description: The physical size of a pixel along Z axis in µm/pixel
        fps:
          type: number
          description: The number of frames per second
        zoom:
          type: integer
          description: The number of zooms in the image
          format: int32
          readOnly: true
        resolution:
          type: number
          description: The image resolution (micron per pixel)
          readOnly: true
          deprecated: true
        magnification:
          type: number
          description: The image magnification at full resolution
        bitPerSample:
          type: integer
          description: The number of bits per sample (color)
          format: int32
          readOnly: true
        samplePerPixel:
          type: integer
          description: The number of samples (colors) per pixel
          format: int32
          readOnly: true
        colorspace:
          type: string
          description: The image colorspace
          readOnly: true
        reviewStart:
          type: string
          description: The image review beginning timestamp
          format: timestamp
        reviewStop:
          type: string
          description: The image review end timestamp
          format: timestamp
        reviewuser:
          type: integer
          description: The image reviewer
          format: int64
        reviewed:
          type: boolean
          description: Whether the image has been reviewed or not
          readOnly: true
        inReview:
          type: boolean
          description: Whether the image currently being reviewed or not
          readOnly: true
        numberOfAnnotations:
          type: integer
          description: The number of user annotation in the image
          format: int64
          readOnly: true
        numberOfJobAnnotations:
          type: integer
          description: The number of job annotation in the image
          format: int64
          readOnly: true
        numberOfReviewedAnnotations:
          type: integer
          description: The number of reviewed annotation in the image
          format: int64
          readOnly: true
        thumb:
          type: string
          description: Image thumbnail URL
          readOnly: true
        preview:
          type: string
          description: Image preview URL
          readOnly: true
        macroURL:
          type: string
          description: Image macro URL
          readOnly: true
      required:
        - baseImage
        - project
    ImageSequence:
      description: A position of an image in the image group
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        image:
          type: integer
          description: The image
          format: int64
        zStack:
          type: integer
          description: The image zStack
          format: int32
        slice:
          type: integer
          description: The image slice
          format: int32
        time:
          type: integer
          description: The image time
          format: int32
        channel:
          type: integer
          description: The image channel
          format: int32
        imageGroup:
          type: integer
          description: The image group
          format: int64
        model:
          type: object
          description: The image instance full data (see image instance for more details)
          readOnly: true
      required:
        - image
        - imageGroup
    ImageServer:
      description: An image server (IMS) instance
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        name:
          type: string
          description: A user friendly name for the image server
        url:
          type: string
          description: The URL of the image server instance
        basePath:
          type: string
          description: The base path used by the image server
        available:
          type: boolean
          description: Whether the server is available or not
      required:
        - url
        - basePath
        - available
    LastConnection:
      description: A Connection is recorded all long the user is connected.
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        created:
          $ref: "#/components/schemas/attribute-created"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        id:
          $ref: "#/components/schemas/attribute-id"
        project:
          type: integer
          description: "(mandatory) The project. Null if the user is not in a project"
          format: int64
        updated:
          $ref: "#/components/schemas/attribute-updated"
        user:
          type: integer
          description: The user
          format: int64
      required:
        - project
        - user
    NestedImageInstance:
      description: An sub image from an image instance (sub area, same image transformed,...)
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        baseImage:
          type: integer
          description: The image linked to the project
          format: int64
        project:
          type: integer
          description: The project that keeps the image
          format: int64
        user:
          type: integer
          description: The user that add the image to the project
          format: int64
        instanceFilename:
          type: string
          description: Instance image filename
          readOnly: true
        originalFilename:
          type: string
          description: Original filename
          readOnly: true
        filename:
          type: string
          description: Similar to originalFilename
          readOnly: true
        blindedName:
          type: object
        path:
          type: string
          description: The internal path of the file
          readOnly: true
        contentType:
          type: string
          description: The image content type
          readOnly: true
        sample:
          type: integer
          description: The source of the image (human, animal,...)
          format: int64
          default: 0 or null if domain
        width:
          type: integer
          description: The N-dimensional image width, in pixels (X)
          format: int32
          readOnly: true
        height:
          type: integer
          description: The N-dimensional image height, in pixels (Y)
          format: int32
          readOnly: true
        depth:
          type: integer
          description: The N-dimensional image depth, in z-slices (Z)
          format: int32
          readOnly: true
        duration:
          type: integer
          description: The N-dimensional image duration, in frames (T)
          format: int32
          readOnly: true
        channels:
          type: integer
          description: The N-dimensional image channels (C)
          format: int32
          readOnly: true
        physicalSizeX:
          type: number
          description: Physical size of a pixel along X axis
        physicalSizeY:
          type: number
          description: Physical size of a pixel along Y axis
        physicalSizeZ:
          type: number
          description: Physical size of a pixel along Z axis
        fps:
          type: number
          description: The number of frames per second
        zoom:
          type: integer
          description: The number of zooms available in the image
          format: int32
          readOnly: true
        resolution:
          type: number
          description: The image resolution (microm per pixel)
        magnification:
          type: integer
          description: The image max zoom
          format: int32
        bitPerSample:
          type: integer
          description: The number of bits per sample (color)
          format: int32
          readOnly: true
        samplePerPixel:
          type: integer
          description: The number of samples (colors) per pixel
          format: int32
          readOnly: true
        colorspace:
          type: string
          description: The image colorspace
          readOnly: true
        reviewStart:
          type: string
          description: The start review date
          format: date
          readOnly: true
        reviewStop:
          type: string
          description: The stop review date
          format: date
          readOnly: true
        reviewuser:
          type: integer
          description: The user who reviewed (or still reviewing) this image
          format: int64
          readOnly: true
        reviewed:
          type: boolean
          description: Image has been reviewed
          readOnly: true
        inReview:
          type: boolean
          description: Image currently reviewed
          readOnly: true
        numberOfAnnotations:
          type: integer
          description: The number of user annotation in the image
          format: int64
          readOnly: true
        numberOfJobAnnotations:
          type: integer
          description: The number of job annotation in the image
          format: int64
          readOnly: true
        numberOfReviewedAnnotations:
          type: integer
          description: The number of reviewed annotation in the image
          format: int64
          readOnly: true
        thumb:
          type: string
          description: URL to get abstract image short view (thumb)
          readOnly: true
        preview:
          type: string
          description: URL to get image preview
          readOnly: true
        macroURL:
          type: string
          description: URL to get image macros
          readOnly: true
        parent:
          type: integer
          description: The image source for this sub-image
          format: int64
        x:
          type: integer
          description: Top x position of this image on the sub-image
          format: int32
        y:
          type: integer
          description: Top y position of this image on the sub-image
          format: int32
      required:
        - baseImage
        - project
        - user
        - resolution
        - magnification
        - parent
    Ontology-write:
      type: object
      properties:
        name:
          type: string
          description: The ontology name
      required:
        - name
    Ontology:
      description:
        An ontology is a list of term. Each term may be link to other term
        with a special relation (parent, synonym,...)
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        name:
          type: string
          description: The ontology name
        user:
          type: integer
          description: The ontology creator
          format: int64
          readOnly: true
        title:
          type: string
          deprecated: true
          readOnly: true
        data:
          type: string
          deprecated: true
          readOnly: true
        isFolder:
          type: boolean
          description: Whether this node has children in the ontology hierarchy
          readOnly: true
        key:
          type: int
          deprecated: true
          readOnly: true
        hideCheckbox:
          type: boolean
          deprecated: true
          readOnly: true
        state:
          type: string
          deprecated: true
          readOnly: true
        projects:
          type: array
          items:
            $ref: "#/components/schemas/Project"
          readOnly: true
        children:
          type: object
          description: Term Tree
          readOnly: true
      required:
        - name
    PersistentConnection:
      description: A Connection is recorded all long the user is connected.
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        created:
          $ref: "#/components/schemas/attribute-created"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        id:
          $ref: "#/components/schemas/attribute-id"
        project:
          type: integer
          description: "(mandatory) The project. Null if the user is not in a project"
          format: int64
        session:
          type: string
          description: The sessionID active during the connection
        updated:
          $ref: "#/components/schemas/attribute-updated"
        user:
          type: integer
          description: The user
          format: int64
      required:
        - project
        - session
        - user
    PersistentImageConsultation:
      description:
        Each PersistentImageConsultation represents an user consultation
        to an imageInstance.
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        user:
          type: integer
          description: The user
          format: int64
        image:
          type: integer
          description: The consulted image
          format: int64
        imageName:
          type: string
          description: The image name
        imageThumb:
          type: string
          description: The image thumb
        mode:
          type: string
          description: The consultation mode (Explore, review)
        project:
          type: integer
          description: The project which contains the image
          format: int64
        projectConnection:
          type: integer
          description: The project connection active during the consultation
          format: int64
        time:
          type: integer
          description: The duration of the user consultation into the image
          format: int64
          readOnly: true
        countCreatedAnnotations:
          type: integer
          description: The count of created annotation during the project connection
          format: int32
          readOnly: true
        session:
          type: string
          description: The sessionID active during the consultation
          writeOnly: true
      required:
        - user
        - image
        - imageName
        - imageThumb
        - mode
        - project
        - projectConnection
        - session
    PersistentProjectConnection:
      description:
        Each PersistentProjectConnection represents an user connection
        to a project.
      type: object
      properties:
        browser:
          type: string
          description: The browser of the user
        browserVersion:
          type: string
          description: The browser version of the user
        class:
          $ref: "#/components/schemas/attribute-class"
        countCreatedAnnotations:
          type: integer
          description: The count of created annotation during the project connection
          format: int32
          readOnly: true
        countViewedImages:
          type: integer
          description: The count of viewed image during the project connection
          format: int32
          readOnly: true
        created:
          $ref: "#/components/schemas/attribute-created"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        id:
          $ref: "#/components/schemas/attribute-id"
        os:
          type: string
          description: The OS of the user
        project:
          type: integer
          description: The consultated project id
          format: int64
        session:
          type: string
          description: The sessionID active during the connection
        time:
          type: integer
          description: The duration of the user connection into the project
          format: int64
          readOnly: true
        updated:
          $ref: "#/components/schemas/attribute-updated"
        user:
          type: integer
          description: The user id
          format: int64
      required:
        - browser
        - browserVersion
        - os
        - project
        - session
        - user
    Project:
      description:
        A project is the main cytomine domain, its a workspace to store
        images, annotations,...
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        name:
          type: string
          description: The project name
        ontology:
          type: integer
          description: The ontology id
          format: int64
        ontologyName:
          type: string
          description: The ontology name
          readOnly: true
        discipline:
          type: integer
          description: The discipline id
          format: int64
          deprecated: true
        disciplineName:
          type: string
          description: The discipline name
          readOnly: true
          deprecated: true
        blindMode:
          type: boolean
          description: Whether the blind mode is activated or not
          default: "false"
        numberOfSlides:
          type: integer
          deprecated: true
          format: int64
          readOnly: true
        numberOfImages:
          type: integer
          description: Number of image in the project
          format: int64
          readOnly: true
        numberOfAnnotations:
          type: integer
          description: Number of annotations created by human users in the project
          format: int64
          readOnly: true
        numberOfJobAnnotations:
          type: integer
          description: Number of annotations created by software in the project
          format: int64
          readOnly: true
        numberOfReviewedAnnotations:
          type: integer
          description: Number of validated annotations in the project
          format: int64
          readOnly: true
        isClosed:
          type: boolean
          description: Whether the project is closed
          default: "false"
        isReadOnly:
          type: boolean
          description: Whether the project is read only
          default: "false"
        isRestricted:
          type: boolean
          description: Whether the project is in restricted mode
          default: "false"
        hideusersLayers:
          type: boolean
          description: Whether contributor layers are hidden for project contributors or not
          default: "false"
        hideAdminsLayers:
          type: boolean
          description: Whether manager layers are hidden for project contributors or not
          default: "false"
        admins:
          type: array
          description: user identifiers that are project managers
          items:
            type: integer
            format: int64
            writeOnly: true
          writeOnly: true
        users:
          type: array
          description: users identifiers that are project contributors
          items:
            type: integer
            format: int64
            writeOnly: true
          writeOnly: true
      required:
        - name
    ProjectDefaultLayer:
      description:
        A Project default layer is a layer in the default list of the visible
        layer for all the image of the project
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        project:
          type: integer
          description: The project
          format: int64
        user:
          type: integer
          description: The user layer
          format: int64
        hideByDefault:
          type: boolean
          description: Hide the layer by default (but still in the layer list)
      required:
        - project
        - user
        - hideByDefault
    ProjectRepresentativeUser:
      description:
        A Project representative user is an user considered as the reference
        for the associate project
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        project:
          type: integer
          description: The project
          format: int64
        user:
          type: integer
          description: The user considered as the reference
          format: int64
      required:
        - project
        - user
    Property:
      description:
        A key-value entry that can be map to a domain (project, image,
        annotation,...)
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        domainIdent:
          $ref: "#/components/schemas/DomainIdent"
        domainClassName:
          $ref: "#/components/schemas/DomainClassName"
        key:
          type: string
          description: The property key
        value:
          type: string
          description: The property value
      required:
        #        - domainIdent
        #        - domainClassName
        - key
        - value
    Relation:
      description: Type of relation between two terms (e.g. term1 PARENT term2)
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        name:
          type: string
          description: The name of the relation
      required:
        - name
    RelationTerm:
      description:
        Relation between a term 1 , a term 2 and a relantion domain (e.g.
        term1 PARENT term2)
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        relation:
          type: integer
          description: The relation
          format: int64
          readOnly: true
        term1:
          type: integer
          description: The first term
          format: int64
        term2:
          type: integer
          description: The second term
          format: int64
      required:
        - relation
        - term1
        - term2
    ReviewedAnnotation:
      description:
        A reviewed annotation is an user annotation validated by a
        user. When a user validate an user annotation, we copy all data from the
        validated annotation to create the review annotation
      type: object
      properties:
        area:
          type: number
          description: The annotation area
          readOnly: true
        areaUnit:
          type: integer
          description: The unit used for area (pixels²=1,micron²=3)
          format: int32
          readOnly: true
        centroid:
          type: object
          description: X,Y coord of the annotation centroid
          readOnly: true
        class:
          $ref: "#/components/schemas/attribute-class"
        created:
          $ref: "#/components/schemas/attribute-created"
        cropURL:
          type: string
          description: URL to get the annotation crop
          readOnly: true
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        geometryCompression:
          type: number
          description:
            The geometry compression rate used to simplify the annotation
            (during creation)
        id:
          $ref: "#/components/schemas/attribute-id"
        image:
          type: integer
          description: The image on which the annotation is drawn
          format: int64
        imageURL:
          type: string
          description: URL to go to the image
          readOnly: true
        location:
          type: string
          description: The annotation geometry (shape) in WKT
        nbComments:
          type: integer
          description: The number of comments added by a user on this annotation
          format: int64
          readOnly: true
        parentClassName:
          type: string
          description: Annotation type that has been reviewed
        parentIdent:
          type: integer
          description: Annotation id that has been reviewed
          format: int64
        perimeter:
          type: number
          description: The annotation perimeter
          readOnly: true
        perimeterUnit:
          type: integer
          description: The unit used for perimeter (pixels=0,mm=2,)
          format: int32
          readOnly: true
        project:
          type: integer
          description: The project in which the annotation is drawn
          format: int64
        reviewuser:
          type: integer
          description: user that review the based annotation
          format: int64
          default: current user
        reviewed:
          type: boolean
          description: Always true
          readOnly: true
        slice:
          type: integer
          description: The slice on which the annotation is drawn
          format: int64
        smallCropURL:
          type: string
          description: URL to get a small annotation crop (<256px)
          readOnly: true
        status:
          type: integer
          description: Status for the reviewed
          format: int32
        term:
          type: array
          description: List of term id mapped with this annotation
          default: "[]"
          items:
            type: string
        terms:
          type: array
          description: List of term id mapped with this annotation
          default: "[]"
          items:
            type: string
        updated:
          $ref: "#/components/schemas/attribute-updated"
        url:
          type: string
          description: URL to go to the annotation on the image
          readOnly: true
        user:
          type: integer
          description: user that created the based annotation
          format: int64
          readOnly: true
      required:
        - image
        - location
        - parentClassName
        - parentIdent
        - project
        - slice
    Sample:
      description:
        "A sample is a source of image. This is a real thing: blood, a
        mouse lung,..."
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        name:
          type: string
          description: Sample name
      required:
        - name
    SecRole:
      description: A user role on the full app (user, admin, guest,...)
      type: object
      properties:
        id:
          $ref: "#/components/schemas/attribute-id"
        authority:
          type: string
          description: The role name
        class:
          type: string
          description: The full class name of the domain
        created:
          type: string
          description: The date of the domain creation
          format: date
        deleted:
          type: string
          description: When domain was removed from Cytomine
          format: date
        updated:
          type: string
          description: The date of the domain modification
          format: date
      required:
        - authority
    SecUser:
      description: A secure user
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        username:
          type: string
          description: The username of the user
        origin:
          type: string
          description: The way this user was created.
        accountExpired:
          type: boolean
          description: If true, account is expired
        accountLocked:
          type: boolean
          description: If true, account is locked
        enabled:
          type: boolean
          description: If true, account is enabled
        password:
          type: string
          description: The user password
          writeOnly: true
        passwordExpired:
          type: boolean
          description: If true, password is expired
        privateKey:
          type: string
          description: The user private key
          default: A generated key
          writeOnly: true
        publicKey:
          type: string
          description: The user public key
          default: A generated key
          writeOnly: true
      required:
        - username
        - origin
        - password
    SecUserSecRole:
      description: user - role link. A user may have many role (user, ADMIN, GUEST)
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        user:
          type: object
        role:
          type: object
        authority:
          type: object
        secRole:
          type: integer
          description: The role id
          format: int64
          writeOnly: true
        secuser:
          type: integer
          description: The user id
          format: int64
          writeOnly: true
      required:
        - secRole
        - secuser
    SharedAnnotation:
      description: Annotation comment
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        comment:
          type: string
          description: The comment
        sender:
          type: integer
          description: The comment writer user id
          format: int64
        senderName:
          type: string
          description: The comment writer username
          readOnly: true
        annotationIdent:
          type: integer
          description: The commented annotation id
          format: int64
          readOnly: true
        annotationClassName:
          readOnly: true
          type: string
          description: The commented annotation class name
          enum:
            - "be.cytomine.ontology.userAnnotation"
        receivers:
          type: array
          description: The comment receiver ids
          items:
            type: integer
            format: int64
        emails:
          type: array
          writeOnly: true
          description: The comment receiver emails. If email is not associated to a user, a new guest user account is created.
          items:
            type: string
            format: email
            writeOnly: true
      required:
        - comment
        - sender
    SliceInstance:
      description: A slice instance of a N-dimensional image
      type: object
      properties:
        baseSlice:
          type: integer
          description: The abstract slice
          format: int64
        class:
          $ref: "#/components/schemas/attribute-class"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        id:
          $ref: "#/components/schemas/attribute-id"
        image:
          type: integer
          description: The image instance id
          format: int64
        project:
          type: integer
          description: The project id that owns the image
          format: int64
        uploadedFile:
          type: integer
          description: The underlying file for the slice
          format: int64
          readOnly: true
        imageServerUrl:
          type: string
          description: URL of the server with tiles
          readOnly: true
        path:
          type: string
          description: The internal path of the file
          readOnly: true
        mime:
          type: integer
          description: The Cytomine internal slice mime type.
          format: int64
          readOnly: true
        channel:
          type: integer
          description: The slice channel index (numbered from 0)
          format: int32
          readOnly: true
        zStack:
          type: integer
          description: The slice Z-section index (numbered from 0)
          format: int32
          readOnly: true
        time:
          type: integer
          description: The slice timepoint index (numbered from 0)
          format: int32
          readOnly: true
        channelName:
          type: string
          description: The channel name
          readOnly: true
        rank:
          type: integer
          description:
            The rank of the slice computed as `'channel' + 'image.channels'
            * ('zStack' + 'image.depth' * 'time')`
          format: int32
          readOnly: true
      required:
        - baseSlice
        - image
        - project
    Storage:
      description:
        A virtual directory where uploaded files are stored. It is owned
        by a human user and can be shared with other human users.
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        user:
          type: integer
          description: |
            The storage owner, which has administration rights on it.
          format: int64
          readOnly: true
        name:
          type: string
          description: The storage name
      required:
        - name
    Tag:
      description: A flag that can be associated to a Cytomine domain.
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        name:
          type: string
          description: The tag name
        user:
          type: integer
          description: The tag creator id
          format: int64
        creatorName:
          type: string
          description: The tag creator username
          readOnly: true
      required:
        - name
        - user
    TagDomainAssociation:
      description: A flag that can be associated to a Cytomine domain.
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        domainIdent:
          $ref: "#/components/schemas/DomainIdent"
        domainClassName:
          $ref: "#/components/schemas/DomainClassName"
        tag:
          type: integer
          description: The tag id
          format: int64
        tagName:
          type: string
          description: The tag name
          readOnly: true
      required:
        #        - domainIdent
        #        - domainClassName
        - tag
    Term:
      description: Term
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        name:
          type: string
          description: The term name
        comment:
          type: string
          description: A comment about the term
        ontology:
          type: integer
          description: The parent ontology
          format: int64
        rate:
          type: number
          deprecated: true
          readOnly: true
        parent:
          type: integer
          description: The parent term
          format: int64
          readOnly: true
        color:
          type: string
          description: "The term color, in hex format"
          example: "#FF0000"
      required:
        - name
        - ontology
        - color
    Track:
      description:
        A track is a group of annotations in different slices of a same
        image.
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        name:
          type: string
          description: The track name
        color:
          type: string
          description: The color associated to the track
        image:
          type: integer
          description: The image on which the track is drawn
          format: int64
        project:
          type: integer
          description: The project in which the track is drawn
          format: int64
      required:
        - name
        - color
        - image
        - project
    UploadedFile:
      description: A file uploaded on the server
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        user:
          type: integer
          description: The uploader
          format: int64
        parent:
          type: integer
          description: The parent uploaded file in the hierarchy
          format: int64
        imageServer:
          type: integer
          description: The image server managing the file
          format: int64
        storage:
          type: integer
          description: The virtual storage where the file is uploaded
          format: int64
        originalFilename:
          type: string
          description: The original filename, including extension
        filename:
          type: string
          description: The internal filename path, including extension
        ext:
          type: string
          description: Extension name
        contentType:
          type: string
          description: File content type
        size:
          type: integer
          description: File size
          format: int64
        path:
          type: string
          description: The internal path of the file
          readOnly: true
        status:
          type: integer
          description: File status
          format: int32
        statusText:
          type: string
          description: Textual file status
          readOnly: true
        projects:
          type: integer
          description:
            List of projects (id) that will have the image, if it can be
            deployed
          format: int64
        lTree:
          type: string
          description: Hierarchical tree of uploaded files
          writeOnly: true
      required:
        - user
        - parent
        - imageServer
        - storage
        - originalFilename
        - filename
        - ext
        - contentType
        - projects
    user:
      description: A cytomine human user
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        username:
          type: string
          description: The username of the user
        origin:
          type: string
          description: The way this user was created.
        firstname:
          type: string
          description: The firstname of the user
        lastname:
          type: string
          description: The lastname of the user
        email:
          type: string
          description: The email of the user
        language:
          type: string
          description: The language of the user
        isDeveloper:
          type: boolean
          description: True if user is in developer mode
        publicKey:
          type: string
          description: The user public key
          default: A generated key
        privateKey:
          type: string
          description: The user private key
          default: A generated key
        passwordExpired:
          type: boolean
          description: If true, password is expired
        enabled:
          type: boolean
          description: If true, account is enabled
        color:
          type: string
          description: NOT USED.
        user:
          type: boolean
          description:
            "(ONLY VISIBLE WHEN DOING GET /api/user/id.format service)
            True if the user is NOT ADMIN and is user "
          readOnly: true
        accountExpired:
          type: boolean
          description: If true, account is expired
        accountLocked:
          type: boolean
          description: If true, account is locked
        admin:
          type: boolean
          description:
            "(ONLY VISIBLE WHEN DOING GET /api/user/id.format service)
            True if the user is ADMIN "
        creator:
          type: integer
          description: user that created this user. Its parent.
          format: int64
          writeOnly: true
        ghest:
          type: boolean
          description:
            "(ONLY VISIBLE WHEN DOING GET /api/user/id.format service)
            True if the user is NOT ADMIN, NOT user but a simple GHEST "
        password:
          type: string
          description: The user password
          writeOnly: true
      required:
        - username
        - origin
        - firstname
        - lastname
        - email
        - language
        - isDeveloper
        - color
        - creator
        - password
    UserGroup:
      description: Link between a group and a user in database
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        user:
          type: integer
          description: The user id
          format: int64
        group:
          type: integer
          description: The group id
          format: int64
      required:
        - user
        - group
    AnnotationListing:
      description: Response for annotation search
      type: object
      properties:
        annotationTerms:
          type: array
          description: "(If params showTerm=true) the annotationterms list id"
          items:
            type: string
        area:
          type: number
          description: "(If params showGis=true) the area size of the annotation"
        areaUnit:
          type: integer
          description: "(If params showGis=true) the area unit (pixels²=1,micron²=3)"
          format: int32
        class:
          type: string
          description: Annotation class name
        container:
          type: integer
          description: "(If params showMeta=true) project annotation id"
          format: int64
        countComments:
          type: integer
          description: "(If params showMeta=true) number of comments on this annotation"
          format: int64
        countReviewedAnnotations:
          type: integer
          description:
            "(If params showMeta=true and reviewed=false) the number of
            reviewed annotation from this annotation"
          format: int32
        created:
          type: string
          description: "(If params showMeta=true) annotation create date"
          format: date
        creator:
          type: string
          description: "(If params showuser=true) the username of the creator"
        cropURL:
          type: string
          description:
            "(If params showMeta=true) URL to get the crop annotation (image
            view that frame the annotation)"
        firstname:
          type: string
          description: "(If params showuser=true) the firstname of the creator"
        geometryCompression:
          type: number
          description:
            "(If params showMeta=true) Geometry compression rate used to
            simplify"
        id:
          type: integer
          description: Annotation id
          format: int64
        idExpectedTerm:
          type: integer
          description:
            "The expected term (real term add by user previously)"
          format: int64
        idTerm:
          type: integer
          description: "The predicted term for the annotation"
          format: int64
        image:
          type: integer
          description: "(If params showMeta=true), image annotation id)"
          format: int64
        imageURL:
          type: string
          description: "(If params showMeta=true) URL to go to the image on the webapp"
        lastname:
          type: string
          description: "(If params showuser=true) the lastname of the creator"
        originalfilename:
          type: string
          description: "(If params showImage=true) the image filename"
        parentIdent:
          type: integer
          description:
            "(If params showMeta=true, only for reviewed) the annotation
            parent of the reviewed annotation"
          format: int64
        perimeter:
          type: number
          description: "(If params showGis=true) the perimeter size of the annotation"
        perimeterUnit:
          type: number
          description: "(If params showGis=true) the perimeter unit (pixels=0,mm=2,)"
        project:
          type: integer
          description: "(If params showMeta=true) project annotation id"
          format: int64
        rate:
          type: number
          description: "(If params showTerm=true) the reliability of the prediction"
        reviewuser:
          type: integer
          description: "(If params showGis=true) the user id thatreview"
          format: int64
        reviewed:
          type: integer
          description: "(If params showMeta=true) annotation is reviewed"
          format: int32
        smallCropURL:
          type: string
          description:
            "(If params showMeta=true)  URL to get the small crop annotation
            (image view that frame the annotation)"
        term:
          type: array
          description: "(If params showTerm=true) the term list id"
          items:
            type: string
        updated:
          type: string
          description: "(If params showMeta=true) annotation update date"
          format: date
        url:
          type: string
          description:
            "(If params showMeta=true) URL to go to the annotation on the
            webapp"
        user:
          type: integer
          description:
            "(If params showMeta=true) user id that create annotation (if
            reveiwed annotation, user that create the annotation that has been validated)"
          format: int64
        userTerm:
          type: object
          description: "(If params showTerm=true) the user id group by term id"
        wkt:
          type: string
          description: "(If params showWKT=true) the full polygon form in WKT"
        x:
          type: number
          description: "(If params showGis=true) the annotation centroid x"
        y:
          type: number
          description: "(If params showGis=true) the annotation centroid y"
    search:
      description: Response for search request
      type: object
      properties:
        class:
          type: string
          description: Domain class
        created:
          type: string
          description: Domain creation timestamp
          format: date
        description:
          type: string
          description: Domain description text
        id:
          type: integer
          description: Domain id
          format: int64
        imageName:
          type: string
          description:
            Image (storing the domain) name. If domain is project, then
            null
        name:
          type: string
          description: Domain name
        projectName:
          type: string
          description: Project (storing the domain) name
        urlApi:
          type: string
          description: URL to get JSON data on the current domain
        urlGoTo:
          type: string
          description: URL to go to the domain on the webapp (GUI)
        urlImage:
          type: array
          description: "Domain thumb (if annotation: crop, if image: thumb, if project: null)"
          items:
            type: string
        user:
          type: integer
          description: Domain creator
          format: int64
        userfullname:
          type: string
          description: Domain creator name (Lastname Firstname)
    configuration:
      description: A key-value entry that save the configurations through the application
      type: object
      properties:
        class:
          $ref: "#/components/schemas/attribute-class"
        id:
          $ref: "#/components/schemas/attribute-id"
        created:
          $ref: "#/components/schemas/attribute-created"
        updated:
          $ref: "#/components/schemas/attribute-updated"
        deleted:
          $ref: "#/components/schemas/attribute-deleted"
        key:
          type: string
          description: The property key
        value:
          type: string
          description: The property value
        readingRole:
          type: object
          description: The minimum role needed to access to the configuration value
      required:
        - key
        - value
        - readingRole
    AbstractImageCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/AbstractImage"
        - $ref: "#/components/schemas/collection"
    AbstractSliceCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/AbstractSlice"
        - $ref: "#/components/schemas/collection"
    AnnotationIndexCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/AnnotationIndex"
        - $ref: "#/components/schemas/collection"
    AnnotationTermCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/AnnotationTerm"
        - $ref: "#/components/schemas/collection"
    AnnotationTrackCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/AnnotationTrack"
        - $ref: "#/components/schemas/collection"
    AttachedFileCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/AttachedFile"
        - $ref: "#/components/schemas/collection"
    CompanionFileCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/CompanionFile"
        - $ref: "#/components/schemas/collection"
    DescriptionCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/Description"
        - $ref: "#/components/schemas/collection"
    GroupCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/Group"
        - $ref: "#/components/schemas/collection"
    ImageGroupCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/ImageGroup"
        - $ref: "#/components/schemas/collection"
    ImageInstanceCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/ImageInstance"
        - $ref: "#/components/schemas/collection"
    ImageServerCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/ImageServer"
        - $ref: "#/components/schemas/collection"
    OntologyCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/Ontology"
        - $ref: "#/components/schemas/collection"
    ProjectCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/Project"
        - $ref: "#/components/schemas/collection"
    PropertyCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/Property"
        - $ref: "#/components/schemas/collection"
    RelationCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/Relation"
        - $ref: "#/components/schemas/collection"
    RelationTermCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/RelationTerm"
        - $ref: "#/components/schemas/collection"
    ReviewedAnnotationCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/ReviewedAnnotation"
        - $ref: "#/components/schemas/collection"
    SecRoleCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/SecRole"
        - $ref: "#/components/schemas/collection"
    SecUserCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/SecUser"
        - $ref: "#/components/schemas/collection"
    SharedAnnotationCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/SharedAnnotation"
        - $ref: "#/components/schemas/collection"
    SliceInstanceCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/SliceInstance"
        - $ref: "#/components/schemas/collection"
    StorageCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/Storage"
        - $ref: "#/components/schemas/collection"
    TagCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/Tag"
        - $ref: "#/components/schemas/collection"
    TagDomainAssociationCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/TagDomainAssociation"
        - $ref: "#/components/schemas/collection"
    TermCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/Term"
        - $ref: "#/components/schemas/collection"
    TrackCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/Track"
        - $ref: "#/components/schemas/collection"
    UserCollection:
      allOf:
        - type: object
          properties:
            collection:
              type: array
              items:
                $ref: "#/components/schemas/user"
        - $ref: "#/components/schemas/collection"
