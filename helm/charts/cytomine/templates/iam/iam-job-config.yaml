apiVersion: batch/v1
kind: CronJob
metadata:
  name: iam-config
  labels:
    app: iam-config
spec:
  schedule: "@hourly"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          initContainers: # initContainers run in sequence, not containers
          - name: login
            image: "{{ .Values.images.iam }}"
            command: ["/bin/sh", "-c"]
            args: ["/opt/keycloak/bin/kcadm.sh config credentials --server https://{{ .Values.global.domainName }}/iam --realm master --user admin --password $(KEYCLOAK_ADMIN_PASSWORD) --config /opt/keycloak-auth/kcadm.config"]
            volumeMounts:
            - name: kc-auth
              mountPath: "/opt/keycloak-auth"
            env:
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-iam-secret
                  key: password

          - name: create-realm
            image: "{{ .Values.images.iam }}"
            command: ["/bin/sh", "-c"]
            args: ["/opt/keycloak/bin/kcadm.sh create realms --server https://{{ .Values.global.domainName }}/iam --config /opt/keycloak-auth/kcadm.config -s realm=cytomine -s enabled=true -o || true"]
            volumeMounts:
            - name: kc-auth
              mountPath: "/opt/keycloak-auth"

          - name: create-user
            image: "{{ .Values.images.iam }}"
            command: ["/bin/sh", "-c"]
            args: ["/opt/keycloak/bin/kcadm.sh create users -r cytomine --server https://{{ .Values.global.domainName }}/iam --config /opt/keycloak-auth/kcadm.config -f /opt/keycloak-conf/config.json -o || true"]
            volumeMounts:
            - name: kc-auth
              mountPath: "/opt/keycloak-auth"
            - name: iam-user-config
              mountPath: "/opt/keycloak-conf/config.json"
              subPath: "config.json"

          - name: set-password
            image: "{{ .Values.images.iam }}"
            command: ["/bin/sh", "-c"]
            args: ["/opt/keycloak/bin/kcadm.sh set-password --server https://{{ .Values.global.domainName }}/iam -r cytomine --username admin --new-password $(CYTOMINE_USER) --config /opt/keycloak-auth/kcadm.config"]
            volumeMounts:
            - name: kc-auth
              mountPath: "/opt/keycloak-auth"
            env:
            - name: CYTOMINE_USER
              valueFrom:
                secretKeyRef:
                  name: cytomine-admin-iam-secret
                  key: password

          - name: create-client
            image: "{{ .Values.images.iam }}"
            command: ["/bin/sh", "-c"]
            args: ["/opt/keycloak/bin/kcadm.sh create clients -r cytomine --server https://{{ .Values.global.domainName }}/iam --config /opt/keycloak-auth/kcadm.config -f /opt/keycloak-conf/config.json -o || true"]
            volumeMounts:
            - name: kc-auth
              mountPath: "/opt/keycloak-auth"
            - name: iam-client-config
              mountPath: "/opt/keycloak-conf/config.json"
              subPath: "config.json"
          containers:
          - name: check-job-done
            image: "{{ .Values.images.iam }}"
            command: ["/bin/sh", "-c"]
            args: ["/opt/keycloak/bin/kcadm.sh config credentials --server https://{{ .Values.global.domainName }}/iam --realm cytomine --user admin --password $(CYTOMINE_USER)"]
            env:
            - name: CYTOMINE_USER
              valueFrom:
                secretKeyRef:
                  name: cytomine-admin-iam-secret
                  key: password
          volumes:
          - emptyDir: {}
            name: kc-auth
          - name: iam-client-config
            configMap:
              name: iam-client-config
              items:
              - key: "config.json"
                path: "config.json"
          - name: iam-user-config
            configMap:
              name: iam-user-config
              items:
              - key: "config.json"
                path: "config.json"
          restartPolicy: Never
      backoffLimit: 1
